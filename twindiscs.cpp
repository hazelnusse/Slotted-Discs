#include "twindiscs.h"

inline int eomwrapper(double t, const double x[6], double f[6], void * params)
{
  ((SlottedDiscs *) params)->q1 = ((SlottedDiscs *) params)->state[0] = x[0];
  ((SlottedDiscs *) params)->q2 = ((SlottedDiscs *) params)->state[1] = x[1];
  ((SlottedDiscs *) params)->q3 = ((SlottedDiscs *) params)->state[2] = x[2];
  ((SlottedDiscs *) params)->q4 = ((SlottedDiscs *) params)->state[3] = x[3];
  ((SlottedDiscs *) params)->q5 = ((SlottedDiscs *) params)->state[4] = x[4];
  ((SlottedDiscs *) params)->w1 = ((SlottedDiscs *) params)->state[5] = x[5];
  return ((SlottedDiscs *) params)->eoms();
}

SlottedDiscs::SlottedDiscs(double * state, DiscParams * p)
{
  cout << "Constructor called." << endl;
  if (setParams(p)) {
    cerr << "Error setting parameters.  Exiting." << endl;
    exit(1);
  }
  if (setState(state)) {
    cerr << "Error setting state of slotted discs.  Exiting." << endl;
    exit(1);
  }
  if (setIntegrator()) {
    cerr << "Error setting ODE integrator.  Exiting." << endl;
  }
  // Set camera constants
  theta = M_PI/4.0;
  phi = M_PI/4.0;
  spin = M_PI/2.0;
  camx = camy = camz = 0.0;
  dcam = 2.0;

  // Constants
  z[1] = M_PI/2.0 - theta;
  z[2] = cos(phi);
  z[3] = cos(spin);
  z[4] = cos(z[1]);
  z[5] = sin(phi);
  z[6] = sin(spin);
  z[7] = z[2]*z[3]*z[4] - z[5]*z[6];
  z[8] = -z[3]*z[5] - z[2]*z[4]*z[6];
  z[9] = sin(z[1]);
  z[10] = z[2]*z[9];
  z[11] = z[2]*z[6] + z[3]*z[4]*z[5];
  z[12] = z[2]*z[3] - z[4]*z[5]*z[6];
  z[13] = z[5]*z[9];
  z[14] = z[3]*z[9];
  z[15] = z[6]*z[9];
  z[22] = cos(alpha);
  z[23] = sin(alpha);
  z[186] = g*m;
} // constructor

SlottedDiscs::~SlottedDiscs() {
  gsl_odeiv_evolve_free(e);
  gsl_odeiv_control_free(c);
  gsl_odeiv_step_free(s);
} // destructor

void SlottedDiscs::printState(void) const
{
  cout.setf(ios::right, ios::adjustfield);
  cout.setf(ios::scientific, ios::floatfield);
  cout.setf(ios::adjustfield, ios::right);
  for (int i = 0; i < 6; ++i) {
    cout.precision(5);
    cout.width(18);
    cout << state[i];
  }
  cout << endl;
} // printState()

void SlottedDiscs::printConstraints(void) const
{
  cout.setf(ios::scientific, ios::floatfield);
  cout.setf(ios::adjustfield, ios::right);
  for (int i = 0; i < 3; ++i) {
    cout.precision(5);
    cout.width(18);
    cout << con[i];
  }
  cout << endl;
} // printConstraints()

void SlottedDiscs::printEnergy(void) const
{
  cout.setf(ios::scientific, ios::floatfield);
  cout.setf(ios::adjustfield, ios::right);
  cout.precision(9);
  cout.width(18);
  cout << ke;
  cout.precision(9);
  cout.width(18);
  cout << pe;
  cout.precision(9);
  cout.width(18);
  cout << ke + pe;
  cout << endl;
} // printEnergy()

void SlottedDiscs::printParameters() const
{
  cout.setf(ios::scientific, ios::floatfield);
  cout.setf(ios::adjustfield, ios::right);
  cout.precision(9);
  cout.width(18);
  cout << ke;
  cout.precision(9);
  cout.width(18);
  cout << pe;
  cout.precision(9);
  cout.width(18);
  cout << (ke + pe);
  cout << endl;
} // printParameters()

int SlottedDiscs::setIntegrator(double t_i, 
                                double h_i,
                                double t_f,
                                const gsl_odeiv_step_type * int_T)
{
  cout << "setIntegrator called." << endl;
  t = t_i;
  tf = t_f;
  h = h_i;
  T = int_T;
  s = gsl_odeiv_step_alloc(T, 6);
  c = gsl_odeiv_control_y_new(1e-6, 1e-9);
  e = gsl_odeiv_evolve_alloc(6);
  sys.function = eomwrapper;
  sys.jacobian = NULL;
  sys.dimension = 6;
  sys.params = this;

  return 0;
} // setIntegrator()

int SlottedDiscs::setParams(DiscParams * p)
{
  cout << "setParams called." << endl;
  if (p) {
    ma = p->ma;
    mb = p->mb;
    ra = p->ra;
    rb = p->rb;
    l = p->l;
    Ia = p->Ia;
    Ib = p->Ib;
    Ja = p->Ja;
    Jb = p->Jb;
    g = p->g;
    alpha = p->alpha;
  } else {
    //ma = mb = 0.0081; // mass of a US Dollar coin
    //ra = rb = 0.0265 / 2.0;
    ma = 2.0;
    mb = 2.0;
    ra = .1;
    rb = .1;
    l = sqrt(2.0)*ra;
    Ia = ma*ra*ra/4.0;
    Ja = 2.0*Ia;
    Ib = mb*rb*rb/4.0;
    Jb = 2.0*Ib;
    g = 9.81;
    alpha = M_PI / 2.0;
  }

  m = ma + mb;
  k = -l*mb/(ma+mb);
  Ixx = Ia + Ib + mb*pow(l,2.0)*pow((1.0-mb/(ma+mb)),2.0) + mb*pow(l,2.0)*(-1.0+mb/(ma+mb))*(1.0-mb/(ma+mb));
  Iyy = Ia + Ib*pow(cos(alpha),2.0) + Jb*pow(sin(alpha),2.0) + mb*pow(l,2.0)*(ma*mb/pow((ma+mb),2.0)+pow((1.0-mb/(ma+mb)),2.0));
  Izz = Ja + Jb + pow(sin(alpha),2.0)*(Ib-Jb) + mb*pow(l,2.0)*(ma*mb/pow((ma+mb), 2.0)+pow((1.0-mb/(ma+mb)),2.0));
  Iyz = sin(alpha)*cos(alpha)*(Ib-Jb);

  return 0;
} // setParams()

int SlottedDiscs::computeOutputs(void)
{
  w2 = -w1*z[68];
  w3 = w1*z[69];
  z[41] = z[22]*z[29] + z[23]*z[25];
  z[42] = z[22]*z[25] - z[23]*z[29];
  z[43] = z[22]*z[31] + z[23]*z[27];
  z[44] = z[22]*z[27] - z[23]*z[31];
  z[45] = z[22]*z[33] + z[23]*z[18];
  z[54] = z[33]*z[39] - z[18]*z[40] - z[32]*(k-z[38]);
  ke = 0.5*pow(w1,2)*(Ixx+Izz*pow(z[69],2)+z[68]*(Iyy*z[68]-2*Iyz*z[69])+m*(
  pow(z[102],2)+pow(z[103],2)+pow(z[104],2)));
  pe = g*m*(z[33]*z[39]-z[18]*z[40]-z[32]*(k-z[38]));
  z[189] = z[7]*z[28] + z[11]*z[30] + z[14]*z[32];
  z[190] = z[7]*z[29] + z[11]*z[31] - z[14]*z[33];
  z[191] = z[7]*z[25] + z[11]*z[27] - z[14]*z[18];
  z[192] = z[8]*z[28] + z[12]*z[30] - z[15]*z[32];
  z[193] = z[8]*z[29] + z[12]*z[31] + z[15]*z[33];
  z[194] = z[8]*z[25] + z[12]*z[27] + z[15]*z[18];
  z[195] = z[10]*z[28] + z[13]*z[30] - z[4]*z[32];
  z[196] = z[4]*z[33] + z[10]*z[29] + z[13]*z[31];
  z[197] = z[4]*z[18] + z[10]*z[25] + z[13]*z[27];
  z[198] = z[7]*z[41] + z[11]*z[43] - z[14]*z[45];
  z[199] = z[7]*z[42] + z[11]*z[44] - z[14]*z[46];
  z[200] = z[8]*z[41] + z[12]*z[43] + z[15]*z[45];
  z[201] = z[8]*z[42] + z[12]*z[44] + z[15]*z[46];
  z[202] = z[4]*z[45] + z[10]*z[41] + z[13]*z[43];
  z[203] = z[4]*z[46] + z[10]*z[42] + z[13]*z[44];
  z[204] = z[7]*z[16] + z[11]*z[17];
  z[205] = z[11]*z[16] - z[7]*z[17];
  z[206] = z[8]*z[16] + z[12]*z[17];
  z[207] = z[12]*z[16] - z[8]*z[17];
  z[208] = z[10]*z[16] + z[13]*z[17];
  z[209] = z[13]*z[16] - z[10]*z[17];
  z[210] = z[52]*z[56] - z[51]*z[55] - z[53]*z[57];
  z[211] = z[51]*z[58] + z[53]*z[60] - z[52]*z[59];
  z[212] = pow(z[210],2) + pow(z[211],2);
  z[213] = pow(z[212],0.5);
  z[214] = z[210]/z[213];
  z[215] = z[211]/z[213];
  z[216] = -z[16]*z[21] - z[17]*z[18]*z[20];
  z[217] = z[16]*z[18]*z[20] - z[17]*z[21];
  z[218] = z[16]*z[30] + z[16]*z[216] + z[17]*z[217] - z[17]*z[28];
  z[219] = z[17]*z[18]*z[21] - z[16]*z[20];
  z[220] = -z[17]*z[20] - z[16]*z[18]*z[21];
  z[221] = z[16]*z[31] + z[16]*z[219] + z[17]*z[220] - z[17]*z[29];
  z[222] = -z[218]*(z[39]-z[52]) - z[221]*(l+z[38]-z[51]);
  z[223] = z[16]*z[220] - z[16]*z[29] - z[17]*z[31] - z[17]*z[219];
  z[224] = z[19]*pow(z[16],2) + z[19]*pow(z[17],2) - z[16]*z[25] - z[17]*
  z[27];
  z[225] = -z[223]*(z[40]-z[53]) - z[224]*(z[39]-z[52]);
  z[226] = z[16]*z[217] - z[16]*z[28] - z[17]*z[30] - z[17]*z[216];
  z[227] = -z[226]*(z[39]-z[52]) - z[223]*(l+z[38]-z[51]);
  z[228] = -z[60]*(z[39]-z[52]) - z[221]*(z[40]-z[53]);
  z[229] = z[60]*(l+z[38]-z[51]) - z[218]*(z[40]-z[53]);
  z[230] = z[224]*(l+z[38]-z[51]) - z[226]*(z[40]-z[53]);
  z[231] = z[61]*z[227] + z[64]*z[229] - z[62]*z[230] - z[63]*z[222];
  z[232] = (z[231]*(z[62]*z[66]-z[64]*z[65])+z[67]*(z[64]*z[228]+z[65]*z[227]-
  z[62]*z[225]-z[66]*z[222]))/pow(z[67],2);
  z[233] = z[19]*z[20]*(pow(z[16],2)+pow(z[17],2));
  z[234] = z[18]*z[19]/(pow(z[34],0.5)*pow(z[35],2));
  z[235] = ra*(z[33]*z[234]-z[18]*z[21]*z[36]);
  z[236] = -z[22]*z[19] - z[23]*z[18]*z[21];
  z[237] = z[236]*(z[48]+pow(z[46],2)/pow(z[47],0.5))/pow(z[48],2);
  z[238] = z[46]*z[236]/(pow(z[47],0.5)*pow(z[48],2));
  z[239] = rb*(z[23]*z[237]+z[33]*z[238]+z[18]*z[21]*z[49]);
  z[240] = z[19]*z[21]*(pow(z[16],2)+pow(z[17],2));
  z[241] = ra*(z[32]*z[234]-z[18]*z[20]*z[36]);
  z[242] = rb*(z[32]*z[238]+z[18]*z[20]*z[49]);
  z[243] = z[55]*(z[235]+z[239]) + z[56]*(z[241]+z[242]) + z[233]*(z[39]-
  z[52]) - z[240]*(l+z[38]-z[51]);
  z[244] = z[19]*(z[35]+pow(z[18],2)/pow(z[34],0.5))/pow(z[35],2);
  z[245] = ra*(z[244]-z[18]*z[234]-z[19]*z[36]);
  z[246] = rb*(z[18]*z[238]-z[22]*z[237]-z[19]*z[49]);
  z[247] = z[60]*(z[235]+z[239]) + z[59]*(z[245]-z[246]);
  z[248] = z[58]*(z[235]+z[239]) + z[59]*(z[241]+z[242]);
  z[249] = z[57]*(z[235]+z[239]) + z[56]*(z[245]-z[246]) - z[240]*(z[40]-
  z[53]) - z[18]*(z[39]-z[52])*(pow(z[16],2)+pow(z[17],2));
  z[250] = z[55]*(z[245]-z[246]) + z[233]*(z[40]-z[53]) + z[18]*(l+z[38]-
  z[51])*(pow(z[16],2)+pow(z[17],2)) - z[57]*(z[241]+z[242]);
  z[251] = z[58]*(z[245]-z[246]) - z[60]*(z[241]+z[242]);
  z[252] = z[61]*z[248] + z[64]*z[250] - z[62]*z[251] - z[63]*z[243];
  z[253] = (z[252]*(z[62]*z[66]-z[64]*z[65])+z[67]*(z[64]*z[249]+z[65]*z[248]-
  z[62]*z[247]-z[66]*z[243]))/pow(z[67],2);
  z[254] = ra*z[19]*z[20]*z[36];
  z[255] = z[23]*z[19]*z[20]*z[46];
  z[256] = (z[23]*z[19]*z[20]*z[48]+z[46]*z[255]/pow(z[47],0.5))/pow(z[48],2);
  z[257] = rb*(z[19]*z[20]*z[49]-z[23]*z[256]-z[33]*z[255]/(pow(z[47],0.5)*
  pow(z[48],2)));
  z[258] = ra*z[19]*z[21]*z[36];
  z[259] = rb*(z[19]*z[21]*z[49]+z[32]*z[255]/(pow(z[47],0.5)*pow(z[48],2)));
  z[260] = z[56]*(z[258]-z[259]) - z[55]*(z[254]-z[257]) - z[56]*(z[39]-z[52]) - 
  z[117]*(l+z[38]-z[51]);
  z[261] = rb*(z[22]*z[256]-z[18]*z[255]/(pow(z[47],0.5)*pow(z[48],2)));
  z[262] = -z[59]*z[261] - z[60]*(z[254]-z[257]) - z[123]*(z[40]-z[53]);
  z[263] = z[59]*(z[258]-z[259]) - z[58]*(z[254]-z[257]) - z[59]*(z[39]-z[52]) - 
  z[123]*(l+z[38]-z[51]);
  z[264] = -z[56]*z[261] - z[57]*(z[254]-z[257]) - z[117]*(z[40]-z[53]);
  z[265] = -z[55]*z[261] - z[56]*(z[40]-z[53]) - z[57]*(z[258]-z[259]);
  z[266] = -z[58]*z[261] - z[59]*(z[40]-z[53]) - z[60]*(z[258]-z[259]);
  z[267] = z[61]*z[263] + z[64]*z[265] - z[62]*z[266] - z[63]*z[260];
  z[268] = (z[267]*(z[62]*z[66]-z[64]*z[65])+z[67]*(z[64]*z[264]+z[65]*z[263]-
  z[62]*z[262]-z[66]*z[260]))/pow(z[67],2);
  z[269] = z[23]*z[19]*z[21] - z[22]*z[18];
  z[270] = z[46]*z[269] + z[76]*z[236];
  z[271] = (z[47]*z[270]+z[46]*z[78]*z[236])/pow(z[47],1.5);
  z[272] = (z[48]*z[271]+2*z[46]*z[80]*z[236]/pow(z[47],0.5))/pow(z[48],3);
  z[273] = rb*(z[32]*z[272]+z[74]*z[238]+z[18]*z[20]*z[82]-z[19]*z[20]*z[49]);
  z[274] = pow(z[18],2) - pow(z[19],2);
  z[275] = (z[34]*z[274]-z[18]*z[19]*z[86])/pow(z[34],1.5);
  z[276] = (z[35]*z[275]-2*z[18]*z[19]*z[87]/pow(z[34],0.5))/pow(z[35],3);
  z[277] = ra*(z[32]*z[276]+z[74]*z[234]+z[18]*z[20]*z[88]+z[19]*z[20]*z[36]);
  z[278] = ra*(z[33]*z[276]+z[75]*z[234]+z[18]*z[21]*z[88]+z[19]*z[21]*z[36]);
  z[279] = (z[48]*(z[46]*z[271]+z[48]*z[269]+z[80]*z[236])+z[46]*z[236]*(
  z[48]*z[76]+2*z[46]*z[80])/pow(z[47],0.5))/pow(z[48],3);
  z[280] = rb*(z[23]*z[279]+z[33]*z[272]+z[75]*z[238]+z[18]*z[21]*z[82]-z[19]*
  z[21]*z[49]);
  z[281] = rb*(z[18]*z[272]-z[22]*z[279]-z[18]*z[49]-z[19]*z[82]-z[19]*z[238]);
  z[282] = (z[35]*(z[18]*z[35]+z[18]*z[275]-z[19]*z[87])-z[18]*z[19]*(z[19]*
  z[35]+2*z[18]*z[87])/pow(z[34],0.5))/pow(z[35],3);
  z[283] = ra*(z[18]*z[36]+z[18]*z[276]-z[282]-z[19]*z[88]-z[19]*z[234]);
  z[284] = z[18]*(z[281]+z[283]) + z[32]*(z[273]+z[277]) + z[33]*(z[278]+
  z[280]) + z[74]*(z[241]+z[242]) + z[75]*(z[235]+z[239]) + z[18]*z[20]*(
  z[84]+z[89]) + z[18]*z[21]*(z[90]+z[94]) + z[19]*(z[245]-z[246]) + z[19]*
  z[21]*(z[39]-z[52]) + z[19]*z[20]*(l+z[38]-z[51]) - z[18]*(z[40]-z[53]) - 
  z[19]*(z[95]-z[98]);
  z[285] = z[77]*z[236] + z[23]*z[18]*z[20]*z[46];
  z[286] = (z[47]*z[285]+z[46]*z[79]*z[236])/pow(z[47],1.5);
  z[287] = (z[48]*z[286]+2*z[46]*z[81]*z[236]/pow(z[47],0.5))/pow(z[48],3);
  z[288] = rb*(z[32]*z[287]+z[33]*z[238]+z[18]*z[20]*z[83]+z[18]*z[21]*z[49]);
  z[289] = (z[46]*z[236]*(z[48]*z[77]+2*z[46]*z[81])/pow(z[47],0.5)+z[48]*(
  z[46]*z[286]+z[81]*z[236]+z[23]*z[18]*z[20]*z[48]))/pow(z[48],3);
  z[290] = rb*(z[18]*z[287]-z[22]*z[289]-z[19]*z[83]);
  z[291] = rb*(z[32]*z[238]+z[18]*z[20]*z[49]-z[23]*z[289]-z[33]*z[287]-z[18]*
  z[21]*z[83]);
  z[292] = z[18]*z[290] + z[19]*z[96] + z[32]*z[288] + z[33]*z[242] + z[18]*
  z[20]*z[85] - z[32]*z[239] - z[33]*z[291] - z[18]*z[20]*z[52] - z[18]*z[21]*
  z[93] - z[18]*z[21]*(l-z[51]);
  z[293] = (z[99]*z[284]-z[100]*z[292])/pow(z[99],2);
  z[294] = z[23]*z[20]*(z[18]*z[46]+z[19]*z[76]);
  z[295] = (z[47]*z[294]+z[78]*z[255])/pow(z[47],1.5);
  z[296] = (z[48]*z[295]+2*z[80]*z[255]/pow(z[47],0.5))/pow(z[48],3);
  z[297] = rb*(z[32]*z[296]+z[18]*z[21]*z[49]+z[19]*z[21]*z[82]+z[74]*z[255]/(
  pow(z[47],0.5)*pow(z[48],2)));
  z[298] = ra*z[21]*(z[18]*z[36]-z[19]*z[88]);
  z[299] = ra*z[20]*(z[18]*z[36]-z[19]*z[88]);
  z[300] = (2*z[46]*z[80]*z[255]/pow(z[47],0.5)+z[48]*(z[46]*z[295]+z[23]*
  z[18]*z[20]*z[48]+z[23]*z[19]*z[20]*z[80]+z[76]*z[255]/pow(z[47],0.5)))/
  pow(z[48],3);
  z[301] = rb*(z[18]*z[20]*z[49]+z[19]*z[20]*z[82]-z[23]*z[300]-z[33]*z[296]-
  z[75]*z[255]/(pow(z[47],0.5)*pow(z[48],2)));
  z[302] = rb*(z[18]*z[296]-z[22]*z[300]-z[19]*z[255]/(pow(z[47],0.5)*pow(
  z[48],2)));
  z[303] = z[19]*z[20]*(z[90]+z[94]) + z[74]*(z[258]-z[259]) + z[18]*z[21]*(l+
  z[38]-z[51]) - z[18]*z[302] - z[19]*z[261] - z[19]*z[21]*(z[84]+z[89]) - 
  z[32]*(z[297]-z[298]) - z[33]*(z[299]-z[301]) - z[75]*(z[254]-z[257]) - 
  z[18]*z[20]*(z[39]-z[52]);
  z[304] = z[23]*z[19]*(z[20]*z[77]+z[21]*z[46]);
  z[305] = (z[47]*z[304]+z[79]*z[255])/pow(z[47],1.5);
  z[306] = (z[48]*z[305]+2*z[81]*z[255]/pow(z[47],0.5))/pow(z[48],3);
  z[307] = rb*(z[19]*z[20]*z[49]-z[32]*z[306]-z[19]*z[21]*z[83]-z[33]*z[255]/(
  pow(z[47],0.5)*pow(z[48],2)));
  z[308] = (2*z[46]*z[81]*z[255]/pow(z[47],0.5)+z[48]*(z[46]*z[305]+z[23]*
  z[19]*z[20]*z[81]+z[23]*z[19]*z[21]*z[48]+z[77]*z[255]/pow(z[47],0.5)))/
  pow(z[48],3);
  z[309] = rb*(z[22]*z[308]-z[18]*z[306]);
  z[310] = rb*(z[23]*z[308]+z[33]*z[306]-z[19]*z[20]*z[83]-z[19]*z[21]*z[49]-
  z[32]*z[255]/(pow(z[47],0.5)*pow(z[48],2)));
  z[311] = z[18]*z[309] + z[32]*z[307] + z[19]*z[21]*z[52] - z[32]*z[257] - 
  z[33]*z[259] - z[33]*z[310] - z[19]*z[20]*z[93] - z[19]*z[21]*z[85] - z[19]*
  z[20]*(l-z[51]);
  z[312] = (z[99]*z[303]-z[100]*z[311])/pow(z[99],2);
  z[313] = (z[231]*(z[61]*z[66]-z[63]*z[65])+z[67]*(z[63]*z[228]+z[65]*z[230]-
  z[61]*z[225]-z[66]*z[229]))/pow(z[67],2);
  z[314] = z[39]*z[313] - z[40]*z[232];
  z[315] = z[68]*z[241] - z[235] - z[253]*(k-z[38]);
  z[316] = (z[252]*(z[61]*z[66]-z[63]*z[65])+z[67]*(z[63]*z[249]+z[65]*z[251]-
  z[61]*z[247]-z[66]*z[250]))/pow(z[67],2);
  z[317] = z[39]*z[316] + z[69]*z[235] - z[40]*z[253] - z[68]*z[245];
  z[318] = z[69]*z[241] - z[245] - z[316]*(k-z[38]);
  z[319] = z[254] + z[68]*z[258] - z[268]*(k-z[38]);
  z[320] = (z[267]*(z[61]*z[66]-z[63]*z[65])+z[67]*(z[63]*z[264]+z[65]*z[266]-
  z[61]*z[262]-z[66]*z[265]))/pow(z[67],2);
  z[321] = z[39]*z[320] - z[40]*z[268] - z[69]*z[254];
  z[322] = z[69]*z[258] - z[320]*(k-z[38]);

  A[0] = w1*z[71]*z[232];
  A[1] = w1*(z[71]*z[253]+cos(q2)*(z[20]+z[21]*z[68])/pow(z[19],2));
  A[2] = w1*(z[71]*z[268]+(sin(q3)-cos(q3)*z[68])/z[19]);
  A[3] = 0;
  A[4] = 0;
  A[5] = -z[70] - z[68]*z[71];
  A[6] = w1*z[20]*z[232];
  A[7] = w1*z[20]*z[253];
  A[8] = w1*(cos(q3)+z[20]*z[268]+sin(q3)*z[68]);
  A[9] = 0;
  A[10] = 0;
  A[11] = z[21] - z[20]*z[68];
  A[12] = w1*z[20]*z[101]*z[232];
  A[13] = w1*(z[20]*z[101]*z[253]+z[293]*(z[21]-z[20]*z[68]));
  A[14] = w1*(z[312]*(z[21]-z[20]*z[68])+z[101]*(cos(q3)+z[20]*z[268]+sin(q3)*
  z[68]));
  A[15] = 0;
  A[16] = 0;
  A[17] = z[101]*(z[21]-z[20]*z[68]);
  A[18] = w1*(z[28]*z[314]+z[102]*z[216]+z[103]*z[219]-sin(q1)*z[19]*z[104]-
  z[25]*z[232]*(k-z[38])-z[29]*z[313]*(k-z[38]));
  A[19] = -w1*(sin(q2)*z[16]*z[20]*z[102]-z[25]*z[315]-z[28]*z[317]-z[29]*
  z[318]-cos(q2)*z[16]*z[104]-sin(q2)*z[16]*z[21]*z[103]);
  A[20] = w1*(z[25]*z[319]+z[28]*z[321]+z[29]*z[102]+z[29]*z[322]+z[103]*
  z[112]);
  A[21] = 0;
  A[22] = 0;
  A[23] = z[25]*z[104] + z[28]*z[102] + z[29]*z[103];
  A[24] = w1*(z[30]*z[314]+z[102]*z[217]+z[103]*z[220]+cos(q1)*z[19]*z[104]-
  z[27]*z[232]*(k-z[38])-z[31]*z[313]*(k-z[38]));
  A[25] = -w1*(sin(q2)*z[17]*z[20]*z[102]-z[27]*z[315]-z[30]*z[317]-z[31]*
  z[318]-cos(q2)*z[17]*z[104]-sin(q2)*z[17]*z[21]*z[103]);
  A[26] = w1*(z[27]*z[319]+z[30]*z[321]+z[31]*z[102]+z[31]*z[322]+z[103]*
  z[107]);
  A[27] = 0;
  A[28] = 0;
  A[29] = z[27]*z[104] + z[30]*z[102] + z[31]*z[103];
  A[30] = w1*(z[30]*z[314]+z[102]*z[217]+z[103]*z[220]+cos(q1)*z[19]*z[104]-
  z[27]*z[232]*(k-z[38])-z[31]*z[313]*(k-z[38]));
  A[31] = -w1*(sin(q2)*z[17]*z[20]*z[102]-z[27]*z[315]-z[30]*z[317]-z[31]*
  z[318]-cos(q2)*z[17]*z[104]-sin(q2)*z[17]*z[21]*z[103]);
  A[32] = w1*(z[27]*z[319]+z[30]*z[321]+z[31]*z[102]+z[31]*z[322]+z[103]*
  z[107]);
  A[33] = 0;
  A[34] = 0;
  A[35] = z[27]*z[104] + z[30]*z[102] + z[31]*z[103];
  T_da[0] = z[189];
  T_da[1] = z[192];
  T_da[2] = z[195];
  T_da[3] = 0;
  T_da[4] = z[190];
  T_da[5] = z[193];
  T_da[6] = z[196];
  T_da[7] = 0;
  T_da[8] = z[191];
  T_da[9] = z[194];
  T_da[10] = z[197];
  T_da[11] = 0;
  T_da[12] = z[14]*(camz-z[54]) - z[7]*(camx-q4) - z[11]*(camy-q5) - k*z[189];
  T_da[13] = -z[8]*(camx-q4) - z[12]*(camy-q5) - k*z[192] - z[15]*(camz-z[54]);
  T_da[14] = -dcam - z[10]*(camx-q4) - z[13]*(camy-q5) - k*z[195] - z[4]*(
  camz-z[54]);
  T_da[15] = 1;
  T_db[0] = z[189];
  T_db[1] = z[192];
  T_db[2] = z[195];
  T_db[3] = 0;
  T_db[4] = z[198];
  T_db[5] = z[200];
  T_db[6] = z[202];
  T_db[7] = 0;
  T_db[8] = z[199];
  T_db[9] = z[201];
  T_db[10] = z[203];
  T_db[11] = 0;
  T_db[12] = z[14]*(camz-z[54]) - z[7]*(camx-q4) - z[11]*(camy-q5) - (k+l)*
  z[189];
  T_db[13] = -z[8]*(camx-q4) - z[12]*(camy-q5) - (k+l)*z[192] - z[15]*(camz-
  z[54]);
  T_db[14] = -dcam - z[10]*(camx-q4) - z[13]*(camy-q5) - (k+l)*z[195] - z[4]*(
  camz-z[54]);
  T_db[15] = 1;
  T_ca[0] = z[204];
  T_ca[1] = z[206];
  T_ca[2] = z[208];
  T_ca[3] = 0;
  T_ca[4] = z[205];
  T_ca[5] = z[207];
  T_ca[6] = z[209];
  T_ca[7] = 0;
  T_ca[8] = -z[14];
  T_ca[9] = z[15];
  T_ca[10] = z[4];
  T_ca[11] = 0;
  T_ca[12] = z[40]*z[191] + z[14]*(camz-z[54]) - z[7]*(camx-q4) - z[11]*(camy-
  q5) - z[39]*z[190] - z[189]*(k-z[38]);
  T_ca[13] = z[40]*z[194] - z[8]*(camx-q4) - z[12]*(camy-q5) - z[39]*z[193] - 
  z[15]*(camz-z[54]) - z[192]*(k-z[38]);
  T_ca[14] = z[40]*z[197] - dcam - z[10]*(camx-q4) - z[13]*(camy-q5) - z[39]*
  z[196] - z[4]*(camz-z[54]) - z[195]*(k-z[38]);
  T_ca[15] = 1;
  T_cb[0] = z[204]*z[215] + z[205]*z[214];
  T_cb[1] = z[206]*z[215] + z[207]*z[214];
  T_cb[2] = z[208]*z[215] + z[209]*z[214];
  T_cb[3] = 0;
  T_cb[4] = z[205]*z[215] - z[204]*z[214];
  T_cb[5] = z[207]*z[215] - z[206]*z[214];
  T_cb[6] = z[209]*z[215] - z[208]*z[214];
  T_cb[7] = 0;
  T_cb[8] = -z[14];
  T_cb[9] = z[15];
  T_cb[10] = z[4];
  T_cb[11] = 0;
  T_cb[12] = z[53]*z[191] + z[14]*(camz-z[54]) - z[7]*(camx-q4) - z[11]*(camy-
  q5) - z[52]*z[190] - z[189]*(k+l-z[51]);
  T_cb[13] = z[53]*z[194] - z[8]*(camx-q4) - z[12]*(camy-q5) - z[52]*z[193] - 
  z[15]*(camz-z[54]) - z[192]*(k+l-z[51]);
  T_cb[14] = z[53]*z[197] - dcam - z[10]*(camx-q4) - z[13]*(camy-q5) - z[52]*
  z[196] - z[4]*(camz-z[54]) - z[195]*(k+l-z[51]);
  T_cb[15] = 1;
  T_so[0] = z[189];
  T_so[1] = z[192];
  T_so[2] = z[195];
  T_so[3] = 0;
  T_so[4] = z[190];
  T_so[5] = z[193];
  T_so[6] = z[196];
  T_so[7] = 0;
  T_so[8] = z[191];
  T_so[9] = z[194];
  T_so[10] = z[197];
  T_so[11] = 0;
  T_so[12] = z[14]*(camz-z[54]) - z[7]*(camx-q4) - z[11]*(camy-q5);
  T_so[13] = -z[8]*(camx-q4) - z[12]*(camy-q5) - z[15]*(camz-z[54]);
  T_so[14] = -dcam - z[10]*(camx-q4) - z[13]*(camy-q5) - z[4]*(camz-z[54]);
  T_so[15] = 1;
  con[0] = z[33]*(z[39]-z[52]) + z[32]*(l+z[38]-z[51]) - z[18]*(z[40]-z[53]);
  con[1] = z[57]*(w1*(z[39]-z[52])+w2*(l+z[38]-z[51])) + z[56]*(w1*(z[40]-
  z[53])-w3*(l+z[38]-z[51])) - z[55]*(w2*(z[40]-z[53])+w3*(z[39]-z[52]));
  con[2] = z[60]*(w1*(z[39]-z[52])+w2*(l+z[38]-z[51])) + z[59]*(w1*(z[40]-
  z[53])-w3*(l+z[38]-z[51])) - z[58]*(w2*(z[40]-z[53])+w3*(z[39]-z[52]));
  p[0] = m*w1*z[102];
  p[1] = m*w1*z[103];
  p[2] = m*w1*z[104];
  H[0] = Ixx*w1;
  H[1] = -w1*(Iyy*z[68]-Iyz*z[69]);
  H[2] = -w1*(Iyz*z[68]-Izz*z[69]);
  return GSL_SUCCESS;
} // computeOutputs()

int SlottedDiscs::eoms(void)
{

  z[20] = cos(q3);
  z[19] = sin(q2);
  z[70] = z[20]/z[19];
  z[16] = cos(q1);
  z[18] = cos(q2);
  z[24] = z[16]*z[18];
  z[17] = sin(q1);
  z[21] = sin(q3);
  z[28] = z[20]*z[24] - z[17]*z[21];
  z[26] = z[17]*z[18];
  z[30] = z[16]*z[21] + z[20]*z[26];
  z[55] = z[16]*z[28] + z[17]*z[30];
  z[33] = z[19]*z[21];
  z[34] = 1 - pow(z[18],2);
  z[35] = pow(z[34],0.5);
  z[36] = 1/z[35];
  z[39] = ra*z[33]*z[36];
  z[46] = z[22]*z[18] - z[23]*z[33];
  z[47] = 1 - pow(z[46],2);
  z[48] = pow(z[47],0.5);
  z[50] = z[46]/z[48];
  z[49] = 1/z[48];
  z[52] = rb*(z[23]*z[50]+z[33]*z[49]);
  z[29] = -z[17]*z[20] - z[21]*z[24];
  z[31] = z[16]*z[20] - z[21]*z[26];
  z[56] = z[16]*z[29] + z[17]*z[31];
  z[32] = z[19]*z[20];
  z[38] = ra*z[32]*z[36];
  z[51] = rb*z[32]*z[49];
  z[62] = -z[55]*(z[39]-z[52]) - z[56]*(l+z[38]-z[51]);
  z[59] = z[16]*z[31] - z[17]*z[29];
  z[37] = z[18]/z[35];
  z[40] = ra*(z[37]-z[18]*z[36]);
  z[53] = rb*(z[22]*z[50]-z[18]*z[49]);
  z[27] = z[17]*z[19];
  z[25] = z[16]*z[19];
  z[60] = z[16]*z[27] - z[17]*z[25];
  z[66] = -z[59]*(z[40]-z[53]) - z[60]*(z[39]-z[52]);
  z[58] = z[16]*z[30] - z[17]*z[28];
  z[64] = -z[58]*(z[39]-z[52]) - z[59]*(l+z[38]-z[51]);
  z[57] = z[16]*z[25] + z[17]*z[27];
  z[65] = -z[56]*(z[40]-z[53]) - z[57]*(z[39]-z[52]);
  z[61] = z[57]*(l+z[38]-z[51]) - z[55]*(z[40]-z[53]);
  z[63] = z[60]*(l+z[38]-z[51]) - z[58]*(z[40]-z[53]);
  z[67] = z[61]*z[64] - z[62]*z[63];
  z[68] = (z[62]*z[66]-z[64]*z[65])/z[67];
  z[71] = z[21]/z[19];
  q1p = -w1*(z[70]+z[68]*z[71]);
  q2p = w1*(z[21]-z[20]*z[68]);
  z[75] = z[18]*z[21];
  z[76] = -z[22]*z[19] - z[23]*z[75];
  z[78] = z[46]*z[76];
  z[80] = z[78]/pow(z[47],0.5);
  z[82] = z[80]/pow(z[48],2);
  z[74] = z[18]*z[20];
  z[84] = rb*(z[32]*z[82]+z[49]*z[74]);
  z[86] = z[18]*z[19];
  z[87] = z[86]/pow(z[34],0.5);
  z[88] = z[87]/pow(z[35],2);
  z[89] = ra*(z[32]*z[88]-z[36]*z[74]);
  z[90] = ra*(z[33]*z[88]-z[36]*z[75]);
  z[91] = (z[46]*z[80]+z[48]*z[76])/pow(z[48],2);
  z[94] = rb*(z[23]*z[91]+z[33]*z[82]+z[49]*z[75]);
  z[95] = rb*(z[18]*z[82]-z[22]*z[91]-z[19]*z[49]);
  z[97] = (z[18]*z[87]+z[19]*z[35])/pow(z[35],2);
  z[98] = ra*(z[97]-z[18]*z[88]-z[19]*z[36]);
  z[100] = z[32]*(z[84]+z[89]) + z[33]*(z[90]+z[94]) + z[18]*(z[95]-z[98]) - 
  z[19]*(z[40]-z[53]) - z[75]*(z[39]-z[52]) - z[74]*(l+z[38]-z[51]);
  z[77] = z[23]*z[32];
  z[79] = z[46]*z[77];
  z[81] = z[79]/pow(z[47],0.5);
  z[83] = z[81]/pow(z[48],2);
  z[85] = rb*(z[32]*z[83]+z[33]*z[49]);
  z[92] = (z[46]*z[81]+z[48]*z[77])/pow(z[48],2);
  z[96] = rb*(z[22]*z[92]-z[18]*z[83]);
  z[93] = rb*(z[32]*z[49]-z[23]*z[92]-z[33]*z[83]);
  z[99] = z[32]*z[85] - z[18]*z[96] - z[32]*z[52] - z[33]*z[93] - z[33]*(l-
  z[51]);
  z[101] = z[100]/z[99];
  q3p = w1*z[101]*(z[21]-z[20]*z[68]);
  z[104] = z[39] + z[68]*(k-z[38]);
  z[69] = (z[61]*z[66]-z[63]*z[65])/z[67];
  z[102] = z[40]*z[68] - z[39]*z[69];
  z[103] = z[40] + z[69]*(k-z[38]);
  q4p = w1*(z[25]*z[104]+z[28]*z[102]+z[29]*z[103]);
  q5p = w1*(z[27]*z[104]+z[30]*z[102]+z[31]*z[103]);
  z[107] = -z[16]*z[21] - z[20]*z[26];
  z[129] = z[17]*(z[30]+z[107]);
  z[114] = z[21]*z[26] - z[16]*z[20];
  z[122] = z[17]*(z[31]+z[114]);
  z[131] = z[129]*(z[39]-z[52]) + z[122]*(l+z[38]-z[51]);
  z[142] = z[129]*(z[40]-z[53]);
  z[110] = z[16]*(z[30]+z[107]);
  z[116] = z[16]*(z[31]+z[114]);
  z[120] = -z[110]*(z[39]-z[52]) - z[116]*(l+z[38]-z[51]);
  z[140] = z[110]*(z[40]-z[53]);
  z[144] = z[61]*z[131] - z[62]*z[142] - z[63]*z[120] - z[64]*z[140];
  z[126] = z[122]*(z[40]-z[53]);
  z[137] = z[116]*(z[40]-z[53]);
  z[147] = (z[144]*(z[62]*z[66]-z[64]*z[65])+z[67]*(z[65]*z[131]-z[62]*z[126]-
  z[64]*z[137]-z[66]*z[120]))/pow(z[67],2);
  z[150] = w1*z[147];
  z[112] = z[17]*z[21] - z[20]*z[24];
  z[123] = z[16]*z[107] - z[17]*z[112];
  z[132] = z[52]*z[59] - z[59]*z[85] - z[58]*(z[38]-z[93]) - z[123]*(l+z[38]-
  z[51]);
  z[139] = -z[55]*z[96] - z[56]*(z[40]-z[53]) - z[57]*(z[39]-z[85]);
  z[143] = -z[58]*z[96] - z[59]*(z[40]-z[53]) - z[60]*(z[39]-z[85]);
  z[117] = z[16]*z[112] + z[17]*z[107];
  z[119] = z[52]*z[56] - z[56]*z[85] - z[55]*(z[38]-z[93]) - z[117]*(l+z[38]-
  z[51]);
  z[145] = z[61]*z[132] + z[64]*z[139] - z[62]*z[143] - z[63]*z[119];
  z[136] = -z[56]*z[96] - z[57]*(z[38]-z[93]) - z[117]*(z[40]-z[53]);
  z[127] = -z[59]*z[96] - z[60]*(z[38]-z[93]) - z[123]*(z[40]-z[53]);
  z[148] = (z[145]*(z[62]*z[66]-z[64]*z[65])+z[67]*(z[64]*z[136]+z[65]*z[132]-
  z[62]*z[127]-z[66]*z[119]))/pow(z[67],2);
  z[151] = w1*z[148];
  z[108] = z[20]*z[25];
  z[109] = z[20]*z[27];
  z[130] = z[17]*z[108] - z[16]*z[109];
  z[115] = z[21]*z[27];
  z[113] = z[21]*z[25];
  z[124] = z[16]*z[115] - z[17]*z[113];
  z[133] = z[58]*(z[90]+z[94]) + z[59]*(z[84]+z[89]) - z[130]*(z[39]-z[52]) - 
  z[124]*(l+z[38]-z[51]);
  z[134] = z[16]*z[24] + z[17]*z[26];
  z[111] = -z[16]*z[108] - z[17]*z[109];
  z[138] = z[134]*(l+z[38]-z[51]) - z[57]*(z[84]+z[89]) - z[55]*(z[95]-z[98]) - 
  z[111]*(z[40]-z[53]);
  z[125] = z[16]*z[26] - z[17]*z[24];
  z[141] = z[125]*(l+z[38]-z[51]) - z[60]*(z[84]+z[89]) - z[58]*(z[95]-z[98]) - 
  z[130]*(z[40]-z[53]);
  z[118] = z[16]*z[113] + z[17]*z[115];
  z[121] = z[55]*(z[90]+z[94]) + z[56]*(z[84]+z[89]) - z[111]*(z[39]-z[52]) - 
  z[118]*(l+z[38]-z[51]);
  z[146] = z[61]*z[133] + z[64]*z[138] - z[62]*z[141] - z[63]*z[121];
  z[135] = z[57]*(z[90]+z[94]) - z[56]*(z[95]-z[98]) - z[118]*(z[40]-z[53]) - 
  z[134]*(z[39]-z[52]);
  z[128] = z[60]*(z[90]+z[94]) - z[59]*(z[95]-z[98]) - z[124]*(z[40]-z[53]) - 
  z[125]*(z[39]-z[52]);
  z[149] = (z[146]*(z[62]*z[66]-z[64]*z[65])+z[67]*(z[64]*z[135]+z[65]*z[133]-
  z[62]*z[128]-z[66]*z[121]))/pow(z[67],2);
  z[152] = w1*z[149];
  z[159] = z[150]*q1p + z[151]*q3p + z[152]*q2p;
  z[153] = (z[144]*(z[61]*z[66]-z[63]*z[65])-z[67]*(z[61]*z[126]+z[63]*z[137]-
  z[65]*z[142]-z[66]*z[140]))/pow(z[67],2);
  z[156] = w1*z[153];
  z[154] = (z[145]*(z[61]*z[66]-z[63]*z[65])+z[67]*(z[63]*z[136]+z[65]*z[143]-
  z[61]*z[127]-z[66]*z[139]))/pow(z[67],2);
  z[157] = w1*z[154];
  z[155] = (z[146]*(z[61]*z[66]-z[63]*z[65])+z[67]*(z[63]*z[135]+z[65]*z[141]-
  z[61]*z[128]-z[66]*z[138]))/pow(z[67],2);
  z[158] = w1*z[155];
  z[160] = -z[156]*q1p - z[157]*q3p - z[158]*q2p;
  z[164] = z[39]*z[153] - z[40]*z[147];
  z[167] = w1*z[164];
  z[165] = z[39]*z[154] - z[38]*z[69] - z[40]*z[148];
  z[168] = w1*z[165];
  z[166] = z[39]*z[155] + z[69]*z[90] - z[40]*z[149] - z[68]*z[98];
  z[169] = w1*z[166];
  z[182] = z[167]*q1p + z[168]*q3p + z[169]*q2p - pow(w1,2)*z[68]*z[104] - 
  pow(w1,2)*z[69]*z[103];
  z[170] = z[39]*z[69] - z[154]*(k-z[38]);
  z[173] = w1*z[170];
  z[171] = z[69]*z[89] - z[98] - z[155]*(k-z[38]);
  z[174] = w1*z[171];
  z[172] = z[153]*(k-z[38]);
  z[175] = w1*z[172];
  z[183] = pow(w1,2)*z[69]*z[102] + z[173]*q3p + z[174]*q2p - pow(w1,2)*
  z[104] - z[175]*q1p;
  z[176] = z[38] + z[39]*z[68] - z[148]*(k-z[38]);
  z[179] = w1*z[176];
  z[177] = z[68]*z[89] - z[90] - z[149]*(k-z[38]);
  z[180] = w1*z[177];
  z[178] = z[147]*(k-z[38]);
  z[181] = w1*z[178];
  z[184] = pow(w1,2)*z[103] + pow(w1,2)*z[68]*z[102] + z[179]*q3p + z[180]*
  q2p - z[181]*q1p;
  z[187] = z[69]*(Iyz*z[159]+Izz*z[160]) + m*(z[102]*z[182]+z[103]*z[183]+
  z[104]*z[184]) - z[186]*(z[32]*z[102]-z[18]*z[104]-z[33]*z[103]) - z[68]*(
  Iyy*z[159]+Iyz*z[160]);
  z[185] = z[69]*(2*Iyz*z[68]-Izz*z[69]) - Ixx - Iyy*pow(z[68],2) - m*(pow(
  z[102],2)+pow(z[103],2)+pow(z[104],2));
  z[188] = z[187]/z[185];
  w1p = z[188];
  /* Update derivative array prior to integration step */
  f[0] = q1p;
  f[1] = q2p;
  f[2] = q3p;
  f[3] = q4p;
  f[4] = q5p;
  f[5] = w1p;
  return GSL_SUCCESS;
} // eoms()

int SlottedDiscs::setState(double * x)
{
  cout << "setState called." << endl;
  if (x) {
    q1 = state[0] = x[0];
    q2 = state[1] = x[1];
    q3 = state[2] = x[2];
    q4 = state[3] = x[3];
    q5 = state[4] = x[4];
    w1 = state[5] = x[5];
  } else {
    q1 = state[0] = 0.0;
    q2 = state[1] = M_PI / 4.0;
    q3 = state[2] = M_PI / 2.0;
    q4 = q5 = state[3] = state[4] = 0.0;
    w1 = state[5] = 1.0;
  }
  return 0;
} // setState()
