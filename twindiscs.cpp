#include "twindiscs.h"

inline int eomwrapper(double t, const double x[6], double f[6], void * params)
{
  ((SlottedDiscs *) params)->q1 = ((SlottedDiscs *) params)->state[0] = x[0];
  ((SlottedDiscs *) params)->q2 = ((SlottedDiscs *) params)->state[1] = x[1];
  ((SlottedDiscs *) params)->q3 = ((SlottedDiscs *) params)->state[2] = x[2];
  ((SlottedDiscs *) params)->q4 = ((SlottedDiscs *) params)->state[3] = x[3];
  ((SlottedDiscs *) params)->q5 = ((SlottedDiscs *) params)->state[4] = x[4];
  ((SlottedDiscs *) params)->w1 = ((SlottedDiscs *) params)->state[5] = x[5];
  return ((SlottedDiscs *) params)->eoms();
}

SlottedDiscs::SlottedDiscs(double * state, DiscParams * p)
{
  cout << "Constructor called." << endl;
  if (setParams(p)) {
    cerr << "Error setting parameters.  Exiting." << endl;
    exit(1);
  }
  if (setState(state)) {
    cerr << "Error setting state of slotted discs.  Exiting." << endl;
    exit(1);
  }
  if (setIntegrator()) {
    cerr << "Error setting ODE integrator.  Exiting." << endl;
  }
  // Set camera constants
  theta = M_PI/4.0;
  phi = M_PI/4.0;
  spin = M_PI/2.0;
  camx = camy = camz = 0.0;
  dcam = 2.0;

  // Constants
  z[1] = M_PI/2.0 - theta;
  z[2] = cos(phi);
  z[3] = cos(spin);
  z[4] = cos(z[1]);
  z[5] = sin(phi);
  z[6] = sin(spin);
  z[7] = z[2]*z[3]*z[4] - z[5]*z[6];
  z[8] = -z[3]*z[5] - z[2]*z[4]*z[6];
  z[9] = sin(z[1]);
  z[10] = z[2]*z[9];
  z[11] = z[2]*z[6] + z[3]*z[4]*z[5];
  z[12] = z[2]*z[3] - z[4]*z[5]*z[6];
  z[13] = z[5]*z[9];
  z[14] = z[3]*z[9];
  z[15] = z[6]*z[9];
  z[22] = cos(alpha);
  z[23] = sin(alpha);
  z[142] = g*m;

  this->eoms();
  this->computeOutputs();
} // constructor

SlottedDiscs::~SlottedDiscs()
{
  gsl_odeiv_evolve_free(e);
  gsl_odeiv_control_free(c);
  gsl_odeiv_step_free(s);
} // destructor

void SlottedDiscs::printState(void) const
{
  cout.setf(ios::right, ios::adjustfield);
  cout.setf(ios::scientific, ios::floatfield);
  cout.setf(ios::adjustfield, ios::right);
  for (int i = 0; i < 6; ++i) {
    cout.precision(9);
    cout.width(18);
    cout << state[i];
  }
  cout << endl;
} // printState()

void SlottedDiscs::printConstraints(void) const
{
  cout.setf(ios::scientific, ios::floatfield);
  cout.setf(ios::adjustfield, ios::right);
  for (int i = 0; i < 3; ++i) {
    cout.precision(9);
    cout.width(18);
    cout << con[i];
  }
  cout << endl;
} // printConstraints()

void SlottedDiscs::printEnergy(void) const
{
  cout.setf(ios::scientific, ios::floatfield);
  cout.setf(ios::adjustfield, ios::right);
  cout.precision(9);
  cout.width(18);
  cout << ke;
  cout.precision(9);
  cout.width(18);
  cout << pe;
  cout.precision(9);
  cout.width(18);
  cout << ke + pe;
  cout << endl;
} // printEnergy()

void SlottedDiscs::printParameters() const
{
  cout.setf(ios::scientific, ios::floatfield);
  cout.setf(ios::adjustfield, ios::right);
  cout.precision(9);
  cout << "ra = " << ra << endl << "rb = " << rb << endl;
  cout << "ma = " << ma << endl << "mb = " << mb << endl;
  cout << "Ia = " << Ia << endl << "Ib = " << Ib << endl;
  cout << "Ja = " << Ja << endl << "Jb = " << Jb << endl;
  cout << "alpha = " << alpha << endl << "l = " << l << endl;
  cout << "k = " << k << endl;
  cout << "Ixx = " << Ixx << endl << "Iyy = " << Iyy << endl;
  cout << "Izz = " << Izz << endl << "Iyz = " << Iyz << endl;
} // printParameters()

int SlottedDiscs::setIntegrator(double t_i, 
                                double h_i,
                                double t_f,
                                const gsl_odeiv_step_type * int_T)
{
  cout << "setIntegrator called." << endl;
  t = t_i;
  tf = t_f;
  h = h_i;
  T = int_T;
  s = gsl_odeiv_step_alloc(T, 6);
  c = gsl_odeiv_control_y_new(1e-6, 1e-9);
  e = gsl_odeiv_evolve_alloc(6);
  sys.function = eomwrapper;
  sys.jacobian = NULL;
  sys.dimension = 6;
  sys.params = this;

  return 0;
} // setIntegrator()

int SlottedDiscs::setParams(DiscParams * p)
{
  cout << "setParams called." << endl;
  if (p) {
    ma = p->ma;
    mb = p->mb;
    ra = p->ra;
    rb = p->rb;
    l = p->l;
    Ia = p->Ia;
    Ib = p->Ib;
    Ja = p->Ja;
    Jb = p->Jb;
    g = p->g;
    alpha = p->alpha;
  } else {
    //ma = mb = 0.0081; // mass of a US Dollar coin
    //ra = rb = 0.0265 / 2.0;
    ma = 2.0;
    mb = 2.0;
    ra = .1;
    rb = .1;
    l = sqrt(2.0)*ra;
    Ia = ma*ra*ra/4.0;
    Ja = ma*ra*ra/2.0;
    Ib = mb*rb*rb/4.0;
    Jb = mb*rb*rb/2.0;
    g = 9.81;
    alpha = M_PI/2.0;
  }

  m = ma + mb;
  k = l*mb/(ma+mb);
  Ixx = Ia + Ib;
  Iyy = Ia + Ib*pow(cos(alpha), 2.0) + Jb*pow(sin(alpha), 2.0) + 
        mb*pow(l, 2.0)*(ma*mb/pow((ma+mb), 2.0)+pow((1.0-mb/(ma+mb)), 2.0));
  Izz = Ja + Jb + pow(sin(alpha), 2.0)*(Ib-Jb) + 
        mb*pow(l, 2.0)*(ma*mb/pow((ma+mb), 2.0)+pow((1.0-mb/(ma+mb)), 2.0));
  Iyz = sin(alpha)*cos(alpha)*(Ib-Jb);

  return 0;
} // setParams()

int SlottedDiscs::computeOutputs(void)
{
  w2 = w1*z[56];
  w3 = -w1*z[57];
  z[35] = z[23]*z[19] - z[22]*z[25];
  z[36] = z[22]*z[19] + z[23]*z[25];
  z[37] = z[22]*z[20];
  z[38] = z[23]*z[20];
  z[39] = z[22]*z[27] + z[23]*z[18];
  z[48] = z[27]*z[33] + z[26]*(k+z[32]) - z[18]*z[34];
  ke = 0.5*pow(w1,2)*(Ixx+Izz*pow(z[57],2)+z[56]*(Iyy*z[56]-2*Iyz*z[57])+m*(
  pow(z[88],2)+pow(z[89],2)+pow(z[90],2)));
  pe = -g*m*(z[18]*z[34]-z[27]*z[33]-z[26]*(k+z[32]));
  z[145] = z[7]*z[16] + z[11]*z[17];
  z[146] = z[11]*z[16] - z[7]*z[17];
  z[147] = z[8]*z[16] + z[12]*z[17];
  z[148] = z[12]*z[16] - z[8]*z[17];
  z[149] = z[10]*z[16] + z[13]*z[17];
  z[150] = z[13]*z[16] - z[10]*z[17];
  z[151] = z[14]*z[26] + z[21]*z[146] + z[24]*z[145];
  z[152] = z[20]*z[146] - z[14]*z[27] - z[25]*z[145];
  z[153] = z[19]*z[145] - z[14]*z[18];
  z[154] = z[21]*z[148] + z[24]*z[147] - z[15]*z[26];
  z[155] = z[15]*z[27] + z[20]*z[148] - z[25]*z[147];
  z[156] = z[15]*z[18] + z[19]*z[147];
  z[157] = z[21]*z[150] + z[24]*z[149] - z[4]*z[26];
  z[158] = z[4]*z[27] + z[20]*z[150] - z[25]*z[149];
  z[159] = z[4]*z[18] + z[19]*z[149];
  z[160] = z[35]*z[145] + z[37]*z[146] - z[14]*z[39];
  z[161] = z[36]*z[145] - z[14]*z[40] - z[38]*z[146];
  z[162] = z[15]*z[39] + z[35]*z[147] + z[37]*z[148];
  z[163] = z[15]*z[40] + z[36]*z[147] - z[38]*z[148];
  z[164] = z[4]*z[39] + z[35]*z[149] + z[37]*z[150];
  z[165] = z[4]*z[40] + z[36]*z[149] - z[38]*z[150];
  z[166] = -z[19]*z[47] - z[24]*z[45] - z[25]*z[46];
  z[167] = z[21]*z[45] - z[20]*z[46];
  z[168] = pow(z[166],2) + pow(z[167],2);
  z[169] = pow(z[168],0.5);
  z[170] = z[166]/z[169];
  z[171] = z[167]/z[169];
  z[172] = z[18]*z[19]/(pow(z[28],0.5)*pow(z[29],2));
  z[173] = ra*(z[26]*z[172]-z[18]*z[20]*z[30]);
  z[174] = -z[22]*z[19] - z[23]*z[18]*z[21];
  z[175] = z[40]*z[174]/(pow(z[41],0.5)*pow(z[42],2));
  z[176] = rb*(z[26]*z[175]+z[18]*z[20]*z[43]);
  z[177] = ra*(z[27]*z[172]-z[18]*z[21]*z[30]);
  z[178] = z[174]*(z[42]+pow(z[40],2)/pow(z[41],0.5))/pow(z[42],2);
  z[179] = rb*(z[23]*z[178]+z[27]*z[175]+z[18]*z[21]*z[43]);
  z[180] = z[24]*(z[177]+z[179]) + z[19]*z[20]*(z[33]-z[46]) - z[25]*(z[173]+
  z[176]) - z[19]*z[21]*(l+z[32]-z[45]);
  z[181] = z[19]*(z[29]+pow(z[18],2)/pow(z[28],0.5))/pow(z[29],2);
  z[182] = ra*(z[181]-z[18]*z[172]-z[19]*z[30]);
  z[183] = rb*(z[18]*z[175]-z[22]*z[178]-z[19]*z[43]);
  z[184] = z[20]*(z[173]+z[176]) + z[21]*(z[177]+z[179]);
  z[185] = z[19]*(z[177]+z[179]) - z[18]*(z[33]-z[46]) - z[25]*(z[182]-z[183]) - 
  z[19]*z[21]*(z[34]-z[47]);
  z[186] = z[24]*(z[182]-z[183]) + z[18]*(l+z[32]-z[45]) + z[19]*z[20]*(z[34]-
  z[47]) - z[19]*(z[173]+z[176]);
  z[187] = z[49]*z[184] + z[51]*z[180] + z[52]*z[186] - z[21]*z[50]*(z[182]-
  z[183]);
  z[188] = (z[187]*(z[50]*z[54]+z[52]*z[53])-z[55]*(z[52]*z[185]+z[53]*z[184]+
  z[54]*z[180]-z[20]*z[50]*(z[182]-z[183])))/pow(z[55],2);
  z[189] = ra*z[19]*z[21]*z[30];
  z[190] = z[23]*z[19]*z[20]*z[40];
  z[191] = rb*(z[19]*z[21]*z[43]+z[26]*z[190]/(pow(z[41],0.5)*pow(z[42],2)));
  z[192] = ra*z[19]*z[20]*z[30];
  z[193] = (z[23]*z[19]*z[20]*z[42]+z[40]*z[190]/pow(z[41],0.5))/pow(z[42],2);
  z[194] = rb*(z[19]*z[20]*z[43]-z[23]*z[193]-z[27]*z[190]/(pow(z[41],0.5)*
  pow(z[42],2)));
  z[195] = z[18]*z[21]*(z[33]-z[46]) + z[18]*z[20]*(l+z[32]-z[45]) - z[24]*(
  z[192]-z[194]) - z[25]*(z[189]-z[191]);
  z[196] = rb*(z[22]*z[193]-z[18]*z[190]/(pow(z[41],0.5)*pow(z[42],2)));
  z[197] = z[20]*z[196] - z[21]*(z[34]-z[47]);
  z[198] = z[20]*(z[189]-z[191]) + z[21]*(l+z[32]-z[45]) - z[20]*(z[33]-z[46]) - 
  z[21]*(z[192]-z[194]);
  z[199] = z[25]*z[196] + z[18]*z[20]*(z[34]-z[47]) - z[19]*(z[192]-z[194]);
  z[200] = z[18]*z[21]*(z[34]-z[47]) - z[24]*z[196] - z[19]*(z[189]-z[191]);
  z[201] = z[21]*z[196] + z[20]*(z[34]-z[47]);
  z[202] = z[49]*z[198] + z[50]*z[201] + z[51]*z[195] + z[52]*z[200];
  z[203] = (z[202]*(z[50]*z[54]+z[52]*z[53])-z[55]*(z[50]*z[197]+z[52]*z[199]+
  z[53]*z[198]+z[54]*z[195]))/pow(z[55],2);
  z[204] = z[23]*z[19]*z[21] - z[22]*z[18];
  z[205] = z[40]*z[204] + z[62]*z[174];
  z[206] = (z[41]*z[205]+z[40]*z[64]*z[174])/pow(z[41],1.5);
  z[207] = (z[42]*z[206]+2*z[40]*z[66]*z[174]/pow(z[41],0.5))/pow(z[42],3);
  z[208] = (z[42]*(z[40]*z[206]+z[42]*z[204]+z[66]*z[174])+z[40]*z[174]*(
  z[42]*z[62]+2*z[40]*z[66])/pow(z[41],0.5))/pow(z[42],3);
  z[209] = rb*(z[18]*z[207]-z[22]*z[208]-z[18]*z[43]-z[19]*z[68]-z[19]*z[175]);
  z[210] = pow(z[18],2) - pow(z[19],2);
  z[211] = (z[28]*z[210]-z[18]*z[19]*z[72])/pow(z[28],1.5);
  z[212] = (z[29]*(z[18]*z[29]+z[18]*z[211]-z[19]*z[73])-z[18]*z[19]*(z[19]*
  z[29]+2*z[18]*z[73])/pow(z[28],0.5))/pow(z[29],3);
  z[213] = (z[29]*z[211]-2*z[18]*z[19]*z[73]/pow(z[28],0.5))/pow(z[29],3);
  z[214] = ra*(z[18]*z[30]+z[18]*z[213]-z[212]-z[19]*z[74]-z[19]*z[172]);
  z[215] = rb*(z[24]*z[175]+z[26]*z[207]+z[18]*z[20]*z[68]-z[19]*z[20]*z[43]);
  z[216] = ra*(z[24]*z[172]+z[26]*z[213]+z[18]*z[20]*z[74]+z[19]*z[20]*z[30]);
  z[217] = ra*(z[25]*z[172]+z[27]*z[213]+z[18]*z[21]*z[74]+z[19]*z[21]*z[30]);
  z[218] = rb*(z[23]*z[208]+z[25]*z[175]+z[27]*z[207]+z[18]*z[21]*z[68]-z[19]*
  z[21]*z[43]);
  z[219] = z[18]*(z[209]+z[214]) + z[24]*(z[173]+z[176]) + z[25]*(z[177]+
  z[179]) + z[26]*(z[215]+z[216]) + z[27]*(z[217]+z[218]) + z[19]*(z[182]-
  z[183]) + z[18]*z[20]*(z[70]-z[75]) + z[19]*z[21]*(z[33]-z[46]) + z[19]*
  z[20]*(l+z[32]-z[45]) - z[18]*(z[34]-z[47]) - z[19]*(z[81]-z[84]) - z[18]*
  z[21]*(z[76]-z[79]);
  z[220] = z[63]*z[174] + z[23]*z[18]*z[20]*z[40];
  z[221] = (z[41]*z[220]+z[40]*z[65]*z[174])/pow(z[41],1.5);
  z[222] = (z[42]*z[221]+2*z[40]*z[67]*z[174]/pow(z[41],0.5))/pow(z[42],3);
  z[223] = rb*(z[26]*z[222]+z[27]*z[175]+z[18]*z[20]*z[69]+z[18]*z[21]*z[43]);
  z[224] = (z[40]*z[174]*(z[42]*z[63]+2*z[40]*z[67])/pow(z[41],0.5)+z[42]*(
  z[40]*z[221]+z[67]*z[174]+z[23]*z[18]*z[20]*z[42]))/pow(z[42],3);
  z[225] = rb*(z[18]*z[222]-z[22]*z[224]-z[19]*z[69]);
  z[226] = rb*(z[26]*z[175]+z[18]*z[20]*z[43]-z[23]*z[224]-z[27]*z[222]-z[18]*
  z[21]*z[69]);
  z[227] = z[18]*z[225] + z[19]*z[82] + z[26]*z[223] + z[27]*z[176] + z[18]*
  z[20]*z[71] - z[26]*z[179] - z[27]*z[226] - z[18]*z[20]*z[46] - z[18]*z[21]*
  z[80] - z[18]*z[21]*(l-z[45]);
  z[228] = (z[85]*z[219]-z[86]*z[227])/pow(z[85],2);
  z[229] = z[23]*z[20]*(z[18]*z[40]+z[19]*z[62]);
  z[230] = (z[41]*z[229]+z[64]*z[190])/pow(z[41],1.5);
  z[231] = (z[42]*z[230]+2*z[66]*z[190]/pow(z[41],0.5))/pow(z[42],3);
  z[232] = (2*z[40]*z[66]*z[190]/pow(z[41],0.5)+z[42]*(z[40]*z[230]+z[23]*
  z[18]*z[20]*z[42]+z[23]*z[19]*z[20]*z[66]+z[62]*z[190]/pow(z[41],0.5)))/
  pow(z[42],3);
  z[233] = rb*(z[18]*z[231]-z[22]*z[232]-z[19]*z[190]/(pow(z[41],0.5)*pow(
  z[42],2)));
  z[234] = rb*(z[26]*z[231]+z[18]*z[21]*z[43]+z[19]*z[21]*z[68]+z[24]*z[190]/(
  pow(z[41],0.5)*pow(z[42],2)));
  z[235] = ra*z[21]*(z[18]*z[30]-z[19]*z[74]);
  z[236] = ra*z[20]*(z[18]*z[30]-z[19]*z[74]);
  z[237] = rb*(z[18]*z[20]*z[43]+z[19]*z[20]*z[68]-z[23]*z[232]-z[27]*z[231]-
  z[25]*z[190]/(pow(z[41],0.5)*pow(z[42],2)));
  z[238] = z[24]*(z[189]-z[191]) + z[18]*z[21]*(l+z[32]-z[45]) - z[18]*z[233] - 
  z[19]*z[196] - z[25]*(z[192]-z[194]) - z[26]*(z[234]-z[235]) - z[27]*(
  z[236]-z[237]) - z[18]*z[20]*(z[33]-z[46]) - z[19]*z[20]*(z[76]-z[79]) - 
  z[19]*z[21]*(z[70]-z[75]);
  z[239] = z[23]*z[19]*(z[20]*z[63]+z[21]*z[40]);
  z[240] = (z[41]*z[239]+z[65]*z[190])/pow(z[41],1.5);
  z[241] = (z[42]*z[240]+2*z[67]*z[190]/pow(z[41],0.5))/pow(z[42],3);
  z[242] = rb*(z[19]*z[20]*z[43]-z[26]*z[241]-z[19]*z[21]*z[69]-z[27]*z[190]/(
  pow(z[41],0.5)*pow(z[42],2)));
  z[243] = (2*z[40]*z[67]*z[190]/pow(z[41],0.5)+z[42]*(z[40]*z[240]+z[23]*
  z[19]*z[20]*z[67]+z[23]*z[19]*z[21]*z[42]+z[63]*z[190]/pow(z[41],0.5)))/
  pow(z[42],3);
  z[244] = rb*(z[22]*z[243]-z[18]*z[241]);
  z[245] = rb*(z[23]*z[243]+z[27]*z[241]-z[19]*z[20]*z[69]-z[19]*z[21]*z[43]-
  z[26]*z[190]/(pow(z[41],0.5)*pow(z[42],2)));
  z[246] = z[18]*z[244] + z[26]*z[242] + z[19]*z[21]*z[46] - z[26]*z[194] - 
  z[27]*z[191] - z[27]*z[245] - z[19]*z[20]*z[80] - z[19]*z[21]*z[71] - z[19]*
  z[20]*(l-z[45]);
  z[247] = (z[85]*z[238]-z[86]*z[246])/pow(z[85],2);
  z[248] = -z[16]*z[21] - z[17]*z[24];
  z[249] = z[17]*z[25] - z[16]*z[20];
  z[250] = (z[187]*(z[49]*z[54]-z[51]*z[53])+z[55]*(z[51]*z[185]+z[20]*z[49]*(
  z[182]-z[183])-z[54]*z[186]-z[21]*z[53]*(z[182]-z[183])))/pow(z[55],2);
  z[251] = z[34]*z[188] + z[56]*z[182] - z[33]*z[250] - z[57]*z[177];
  z[252] = -z[182] - z[57]*z[173] - z[250]*(k+z[32]);
  z[253] = -z[177] - z[56]*z[173] - z[188]*(k+z[32]);
  z[254] = (z[202]*(z[49]*z[54]-z[51]*z[53])+z[55]*(z[51]*z[199]+z[53]*z[201]-
  z[49]*z[197]-z[54]*z[200]))/pow(z[55],2);
  z[255] = z[34]*z[203] + z[57]*z[192] - z[33]*z[254];
  z[256] = -z[17]*z[20] - z[16]*z[18]*z[21];
  z[257] = -z[57]*z[189] - z[254]*(k+z[32]);
  z[258] = z[17]*z[21] - z[16]*z[18]*z[20];
  z[259] = z[192] - z[56]*z[189] - z[203]*(k+z[32]);
  z[260] = z[16]*z[20] - z[17]*z[18]*z[21];
  z[261] = -z[16]*z[21] - z[17]*z[18]*z[20];

/* Write output to screen and to output file(s) */
  A[0] = 0;
  A[1] = -w1*(z[59]*z[188]-cos(q2)*(z[20]-z[21]*z[56])/pow(z[19],2));
  A[2] = -w1*(z[59]*z[203]-(sin(q3)+cos(q3)*z[56])/z[19]);
  A[3] = 0;
  A[4] = 0;
  A[5] = z[56]*z[59] - z[58];
  A[6] = 0;
  A[7] = -w1*z[20]*z[188];
  A[8] = w1*(cos(q3)-z[20]*z[203]-sin(q3)*z[56]);
  A[9] = 0;
  A[10] = 0;
  A[11] = z[21] + z[20]*z[56];
  A[12] = 0;
  A[13] = -w1*(z[20]*z[87]*z[188]-z[228]*(z[21]+z[20]*z[56]));
  A[14] = w1*(z[247]*(z[21]+z[20]*z[56])+z[87]*(cos(q3)-z[20]*z[203]-sin(q3)*
  z[56]));
  A[15] = 0;
  A[16] = 0;
  A[17] = z[87]*(z[21]+z[20]*z[56]);
  A[18] = w1*(z[88]*z[248]+z[89]*z[249]-sin(q1)*z[19]*z[90]);
  A[19] = -w1*(sin(q2)*z[16]*z[20]*z[88]-z[91]*z[251]-z[93]*z[252]-z[95]*
  z[253]-cos(q2)*z[16]*z[90]-sin(q2)*z[16]*z[21]*z[89]);
  A[20] = w1*(z[88]*z[256]+z[89]*z[258]+z[91]*z[255]+z[93]*z[257]+z[95]*
  z[259]);
  A[21] = 0;
  A[22] = 0;
  A[23] = z[88]*z[91] + z[89]*z[93] + z[90]*z[95];
  A[24] = w1*(z[88]*z[91]+z[89]*z[93]+cos(q1)*z[19]*z[90]);
  A[25] = -w1*(sin(q2)*z[17]*z[20]*z[88]-z[92]*z[251]-z[94]*z[252]-z[96]*
  z[253]-cos(q2)*z[17]*z[90]-sin(q2)*z[17]*z[21]*z[89]);
  A[26] = w1*(z[88]*z[260]+z[89]*z[261]+z[92]*z[255]+z[94]*z[257]+z[96]*
  z[259]);
  A[27] = 0;
  A[28] = 0;
  A[29] = z[88]*z[92] + z[89]*z[94] + z[90]*z[96];
  A[30] = w1*(z[88]*z[91]+z[89]*z[93]+cos(q1)*z[19]*z[90]);
  A[31] = -w1*(sin(q2)*z[17]*z[20]*z[88]-z[92]*z[251]-z[94]*z[252]-z[96]*
  z[253]-cos(q2)*z[17]*z[90]-sin(q2)*z[17]*z[21]*z[89]);
  A[32] = w1*(z[88]*z[260]+z[89]*z[261]+z[92]*z[255]+z[94]*z[257]+z[96]*
  z[259]);
  A[33] = 0;
  A[34] = 0;
  A[35] = z[88]*z[92] + z[89]*z[94] + z[90]*z[96];
  T_da[0] = z[151];
  T_da[1] = z[154];
  T_da[2] = z[157];
  T_da[3] = 0;
  T_da[4] = z[152];
  T_da[5] = z[155];
  T_da[6] = z[158];
  T_da[7] = 0;
  T_da[8] = z[153];
  T_da[9] = z[156];
  T_da[10] = z[159];
  T_da[11] = 0;
  T_da[12] = k*z[151] + z[14]*(camz-z[48]) - z[7]*(camx-q4) - z[11]*(camy-q5);
  T_da[13] = k*z[154] - z[8]*(camx-q4) - z[12]*(camy-q5) - z[15]*(camz-z[48]);
  T_da[14] = k*z[157] - dcam - z[10]*(camx-q4) - z[13]*(camy-q5) - z[4]*(camz-
  z[48]);
  T_da[15] = 1;
  T_db[0] = z[151];
  T_db[1] = z[154];
  T_db[2] = z[157];
  T_db[3] = 0;
  T_db[4] = z[160];
  T_db[5] = z[162];
  T_db[6] = z[164];
  T_db[7] = 0;
  T_db[8] = z[161];
  T_db[9] = z[163];
  T_db[10] = z[165];
  T_db[11] = 0;
  T_db[12] = (k-l)*z[151] + z[14]*(camz-z[48]) - z[7]*(camx-q4) - z[11]*(camy-
  q5);
  T_db[13] = (k-l)*z[154] - z[8]*(camx-q4) - z[12]*(camy-q5) - z[15]*(camz-
  z[48]);
  T_db[14] = (k-l)*z[157] - dcam - z[10]*(camx-q4) - z[13]*(camy-q5) - z[4]*(
  camz-z[48]);
  T_db[15] = 1;
  T_ca[0] = z[145];
  T_ca[1] = z[147];
  T_ca[2] = z[149];
  T_ca[3] = 0;
  T_ca[4] = z[146];
  T_ca[5] = z[148];
  T_ca[6] = z[150];
  T_ca[7] = 0;
  T_ca[8] = -z[14];
  T_ca[9] = z[15];
  T_ca[10] = z[4];
  T_ca[11] = 0;
  T_ca[12] = z[34]*z[153] + z[151]*(k+z[32]) + z[14]*(camz-z[48]) - z[7]*(
  camx-q4) - z[11]*(camy-q5) - z[33]*z[152];
  T_ca[13] = z[34]*z[156] + z[154]*(k+z[32]) - z[8]*(camx-q4) - z[12]*(camy-
  q5) - z[33]*z[155] - z[15]*(camz-z[48]);
  T_ca[14] = z[34]*z[159] + z[157]*(k+z[32]) - dcam - z[10]*(camx-q4) - z[13]*(
  camy-q5) - z[33]*z[158] - z[4]*(camz-z[48]);
  T_ca[15] = 1;
  T_cb[0] = z[145]*z[171] + z[146]*z[170];
  T_cb[1] = z[147]*z[171] + z[148]*z[170];
  T_cb[2] = z[149]*z[171] + z[150]*z[170];
  T_cb[3] = 0;
  T_cb[4] = z[146]*z[171] - z[145]*z[170];
  T_cb[5] = z[148]*z[171] - z[147]*z[170];
  T_cb[6] = z[150]*z[171] - z[149]*z[170];
  T_cb[7] = 0;
  T_cb[8] = -z[14];
  T_cb[9] = z[15];
  T_cb[10] = z[4];
  T_cb[11] = 0;
  T_cb[12] = z[47]*z[153] + z[14]*(camz-z[48]) - z[7]*(camx-q4) - z[11]*(camy-
  q5) - z[46]*z[152] - z[151]*(l-k-z[45]);
  T_cb[13] = z[47]*z[156] - z[8]*(camx-q4) - z[12]*(camy-q5) - z[46]*z[155] - 
  z[15]*(camz-z[48]) - z[154]*(l-k-z[45]);
  T_cb[14] = z[47]*z[159] - dcam - z[10]*(camx-q4) - z[13]*(camy-q5) - z[46]*
  z[158] - z[4]*(camz-z[48]) - z[157]*(l-k-z[45]);
  T_cb[15] = 1;
  T_so[0] = z[151];
  T_so[1] = z[154];
  T_so[2] = z[157];
  T_so[3] = 0;
  T_so[4] = z[152];
  T_so[5] = z[155];
  T_so[6] = z[158];
  T_so[7] = 0;
  T_so[8] = z[153];
  T_so[9] = z[156];
  T_so[10] = z[159];
  T_so[11] = 0;
  T_so[12] = z[14]*(camz-z[48]) - z[7]*(camx-q4) - z[11]*(camy-q5);
  T_so[13] = -z[8]*(camx-q4) - z[12]*(camy-q5) - z[15]*(camz-z[48]);
  T_so[14] = -dcam - z[10]*(camx-q4) - z[13]*(camy-q5) - z[4]*(camz-z[48]);
  T_so[15] = 1;
  con[0] = z[27]*(z[33]-z[46]) + z[26]*(l+z[32]-z[45]) - z[18]*(z[34]-z[47]);
  con[1] = z[19]*(w1*(z[33]-z[46])+w2*(l+z[32]-z[45])) - z[24]*(w2*(z[34]-
  z[47])+w3*(z[33]-z[46])) - z[25]*(w1*(z[34]-z[47])-w3*(l+z[32]-z[45]));
  con[2] = z[20]*(w1*(z[34]-z[47])-w3*(l+z[32]-z[45])) - z[21]*(w2*(z[34]-
  z[47])+w3*(z[33]-z[46]));
  p[0] = m*w1*z[88];
  p[1] = m*w1*z[89];
  p[2] = m*w1*z[90];
  H[0] = Ixx*w1;
  H[1] = w1*(Iyy*z[56]-Iyz*z[57]);
  H[2] = w1*(Iyz*z[56]-Izz*z[57]);

  return GSL_SUCCESS;
} // computeOutputs()

int SlottedDiscs::eoms(void)
{
  z[20] = cos(q3);
  z[19] = sin(q2);
  z[58] = z[20]/z[19];
  z[18] = cos(q2);
  z[21] = sin(q3);
  z[25] = z[18]*z[21];
  z[26] = z[19]*z[20];
  z[28] = 1 - pow(z[18],2);
  z[29] = pow(z[28],0.5);
  z[30] = 1/z[29];
  z[32] = ra*z[26]*z[30];
  z[27] = z[19]*z[21];
  z[40] = z[22]*z[18] - z[23]*z[27];
  z[41] = 1 - pow(z[40],2);
  z[42] = pow(z[41],0.5);
  z[43] = 1/z[42];
  z[45] = rb*z[26]*z[43];
  z[24] = z[18]*z[20];
  z[33] = ra*z[27]*z[30];
  z[44] = z[40]/z[42];
  z[46] = rb*(z[23]*z[44]+z[27]*z[43]);
  z[50] = z[25]*(l+z[32]-z[45]) - z[24]*(z[33]-z[46]);
  z[31] = z[18]/z[29];
  z[34] = ra*(z[31]-z[18]*z[30]);
  z[47] = rb*(z[22]*z[44]-z[18]*z[43]);
  z[54] = z[20]*(z[34]-z[47]);
  z[52] = -z[21]*(z[33]-z[46]) - z[20]*(l+z[32]-z[45]);
  z[53] = z[25]*(z[34]-z[47]) - z[19]*(z[33]-z[46]);
  z[49] = z[19]*(l+z[32]-z[45]) - z[24]*(z[34]-z[47]);
  z[51] = z[21]*(z[34]-z[47]);
  z[55] = z[49]*z[52] + z[50]*z[51];
  z[56] = (z[50]*z[54]+z[52]*z[53])/z[55];
  z[59] = z[21]/z[19];
  q1p = -w1*(z[58]-z[56]*z[59]);
  q2p = w1*(z[21]+z[20]*z[56]);
  z[62] = -z[22]*z[19] - z[23]*z[25];
  z[64] = z[40]*z[62];
  z[66] = z[64]/pow(z[41],0.5);
  z[68] = z[66]/pow(z[42],2);
  z[77] = (z[40]*z[66]+z[42]*z[62])/pow(z[42],2);
  z[81] = rb*(z[18]*z[68]-z[22]*z[77]-z[19]*z[43]);
  z[72] = z[18]*z[19];
  z[73] = z[72]/pow(z[28],0.5);
  z[83] = (z[18]*z[73]+z[19]*z[29])/pow(z[29],2);
  z[74] = z[73]/pow(z[29],2);
  z[84] = ra*(z[83]-z[18]*z[74]-z[19]*z[30]);
  z[70] = rb*(z[24]*z[43]+z[26]*z[68]);
  z[75] = ra*(z[24]*z[30]-z[26]*z[74]);
  z[76] = ra*(z[25]*z[30]-z[27]*z[74]);
  z[79] = rb*(z[23]*z[77]+z[25]*z[43]+z[27]*z[68]);
  z[86] = z[18]*(z[81]-z[84]) + z[26]*(z[70]-z[75]) - z[19]*(z[34]-z[47]) - 
  z[25]*(z[33]-z[46]) - z[27]*(z[76]-z[79]) - z[24]*(l+z[32]-z[45]);
  z[63] = z[23]*z[26];
  z[65] = z[40]*z[63];
  z[67] = z[65]/pow(z[41],0.5);
  z[69] = z[67]/pow(z[42],2);
  z[71] = rb*(z[26]*z[69]+z[27]*z[43]);
  z[78] = (z[40]*z[67]+z[42]*z[63])/pow(z[42],2);
  z[82] = rb*(z[22]*z[78]-z[18]*z[69]);
  z[80] = rb*(z[26]*z[43]-z[23]*z[78]-z[27]*z[69]);
  z[85] = z[26]*z[71] - z[18]*z[82] - z[26]*z[46] - z[27]*z[80] - z[27]*(l-
  z[45]);
  z[87] = z[86]/z[85];
  q3p = w1*z[87]*(z[21]+z[20]*z[56]);
  z[57] = (z[49]*z[54]-z[51]*z[53])/z[55];
  z[88] = z[33]*z[57] - z[34]*z[56];
  z[16] = cos(q1);
  z[17] = sin(q1);
  z[91] = z[16]*z[24] - z[17]*z[21];
  z[89] = z[34] + z[57]*(k+z[32]);
  z[93] = -z[16]*z[25] - z[17]*z[20];
  z[90] = z[33] + z[56]*(k+z[32]);
  z[95] = z[16]*z[19];
  q4p = w1*(z[88]*z[91]+z[89]*z[93]+z[90]*z[95]);
  z[92] = z[16]*z[21] + z[17]*z[24];
  z[94] = z[16]*z[20] - z[17]*z[25];
  z[96] = z[17]*z[19];
  q5p = w1*(z[88]*z[92]+z[89]*z[94]+z[90]*z[96]);
  z[103] = z[20]*z[46] + z[21]*z[80] + z[21]*(l-z[45]) - z[20]*z[71];
  z[109] = z[21]*z[82] + z[20]*(z[34]-z[47]);
  z[99] = z[24]*z[80] + z[25]*z[71] + z[24]*(l-z[45]) - z[25]*z[46];
  z[108] = z[25]*(z[34]-z[47]) - z[24]*z[82] - z[19]*(z[33]-z[71]);
  z[111] = z[49]*z[103] + z[50]*z[109] + z[51]*z[99] + z[52]*z[108];
  z[102] = z[20]*z[82] - z[21]*(z[34]-z[47]);
  z[106] = z[25]*z[82] + z[24]*(z[34]-z[47]) - z[19]*(z[32]-z[80]);
  z[113] = (z[111]*(z[50]*z[54]+z[52]*z[53])-z[55]*(z[50]*z[102]+z[52]*z[106]+
  z[53]*z[103]+z[54]*z[99]))/pow(z[55],2);
  z[115] = w1*z[113];
  z[104] = z[20]*(z[70]-z[75]) - z[21]*(z[76]-z[79]);
  z[110] = z[21]*(z[81]-z[84]);
  z[100] = z[26]*(z[33]-z[46]) - z[24]*(z[76]-z[79]) - z[25]*(z[70]-z[75]) - 
  z[27]*(l+z[32]-z[45]);
  z[107] = z[26]*(z[34]-z[47]) + z[18]*(l+z[32]-z[45]) - z[19]*(z[70]-z[75]) - 
  z[24]*(z[81]-z[84]);
  z[112] = z[49]*z[104] + z[50]*z[110] + z[51]*z[100] + z[52]*z[107];
  z[101] = z[20]*(z[81]-z[84]);
  z[105] = z[25]*(z[81]-z[84]) - z[18]*(z[33]-z[46]) - z[19]*(z[76]-z[79]) - 
  z[27]*(z[34]-z[47]);
  z[114] = (z[112]*(z[50]*z[54]+z[52]*z[53])-z[55]*(z[50]*z[101]+z[52]*z[105]+
  z[53]*z[104]+z[54]*z[100]))/pow(z[55],2);
  z[116] = w1*z[114];
  z[121] = -z[115]*q3p - z[116]*q2p;
  z[117] = (z[111]*(z[49]*z[54]-z[51]*z[53])+z[55]*(z[51]*z[106]+z[53]*z[109]-
  z[49]*z[102]-z[54]*z[108]))/pow(z[55],2);
  z[119] = w1*z[117];
  z[118] = (z[112]*(z[49]*z[54]-z[51]*z[53])+z[55]*(z[51]*z[105]+z[53]*z[110]-
  z[49]*z[101]-z[54]*z[107]))/pow(z[55],2);
  z[120] = w1*z[118];
  z[122] = z[119]*q3p + z[120]*q2p;
  z[126] = z[34]*z[114] + z[56]*z[84] + z[57]*z[76] - z[33]*z[118];
  z[128] = w1*z[126];
  z[127] = z[32]*z[57] + z[34]*z[113] - z[33]*z[117];
  z[129] = w1*z[127];
  z[138] = pow(w1,2)*z[56]*z[90] + pow(w1,2)*z[57]*z[89] + z[128]*q2p + 
  z[129]*q3p;
  z[130] = z[57]*z[75] - z[84] - z[118]*(k+z[32]);
  z[132] = w1*z[130];
  z[131] = -z[33]*z[57] - z[117]*(k+z[32]);
  z[133] = w1*z[131];
  z[139] = z[132]*q2p + z[133]*q3p - pow(w1,2)*z[90] - pow(w1,2)*z[57]*z[88];
  z[134] = z[32] - z[33]*z[56] - z[113]*(k+z[32]);
  z[136] = w1*z[134];
  z[135] = z[76] + z[56]*z[75] - z[114]*(k+z[32]);
  z[137] = w1*z[135];
  z[140] = pow(w1,2)*z[89] + z[136]*q3p + z[137]*q2p - pow(w1,2)*z[56]*z[88];
  z[143] = z[56]*(Iyy*z[121]+Iyz*z[122]) + m*(z[88]*z[138]+z[89]*z[139]+z[90]*
  z[140]) - z[142]*(z[26]*z[88]-z[18]*z[90]-z[27]*z[89]) - z[57]*(Iyz*z[121]+
  Izz*z[122]);
  z[141] = -Ixx - Izz*pow(z[57],2) - z[56]*(Iyy*z[56]-2*Iyz*z[57]) - m*(pow(
  z[88],2)+pow(z[89],2)+pow(z[90],2));
  z[144] = z[143]/z[141];
  w1p = z[144];

  /* Update derivative array prior to integration step */
  f[0] = q1p;
  f[1] = q2p;
  f[2] = q3p;
  f[3] = q4p;
  f[4] = q5p;
  f[5] = w1p;
  return GSL_SUCCESS;
} // eoms()

int SlottedDiscs::setState(double * x)
{
  cout << "setState called." << endl;
  if (x) {
    q1 = state[0] = x[0];
    q2 = state[1] = x[1];
    q3 = state[2] = x[2];
    q4 = state[3] = x[3];
    q5 = state[4] = x[4];
    w1 = state[5] = x[5];
  } else {
    q1 = state[0] = 0.0;
    q2 = state[1] = M_PI / 4.0;
    q3 = state[2] = M_PI / 2.0;
    q4 = q5 = state[3] = state[4] = 0.0;
    w1 = state[5] = 1.0;
  }
  return 0;
} // setState()
