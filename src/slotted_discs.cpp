#include "slotted_discs.h"

int eomwrapper(double t, const double x[6], double f[6], void * params)
{
  SlottedDiscs * p = (SlottedDiscs *) params;
  // Assign the states of the SlottedDiscs object
  p->setState(x);
  // Evaluate the RHS of the ODE's representing the equations of motion
  p->eoms();
  // Assign the right hand sides of the ODE's to the array passed
  f[0] = p->q1p;
  f[1] = p->q2p;
  f[2] = p->q3p;
  f[3] = p->q4p;
  f[4] = p->q5p;
  f[5] = p->wp;
  // Return the status
  return GSL_SUCCESS;
}

ostream &operator<<(ostream &file, const SlottedDiscs * discs)
{
  file.write((char *) &(discs->t), sizeof discs->t);
  file.write((char *) &discs->q1, sizeof discs->q1);
  file.write((char *) &discs->q2, sizeof discs->q2);
  file.write((char *) &discs->q3, sizeof discs->q3);
  file.write((char *) &discs->q4, sizeof discs->q4);
  file.write((char *) &discs->q5, sizeof discs->q5);
  file.write((char *) &discs->w, sizeof discs->w);
  file.write((char *) &discs->w1, sizeof discs->w1);
  file.write((char *) &discs->w2, sizeof discs->w2);
  file.write((char *) &discs->w3, sizeof discs->w3);
  file.write((char *) &(discs->no_cb), sizeof discs->no_cb);
  file.write((char *) &(discs->ke), sizeof discs->ke);
  file.write((char *) &(discs->pe), sizeof discs->pe);
  file.write((char *) &(discs->te), sizeof discs->te);
  file.write((char *) &(discs->H), sizeof discs->H);
  file.write((char *) &(discs->p), sizeof discs->p);
  return file;
} // operator <<

void SlottedDiscs::writeRecord_dt(void) const
{
  ofstream fp("./record.py", ios::out);
  fp << "#!/usr/bin/env python" << endl;
  fp << "import numpy as np" << endl;
  fp << "record_dt = np.dtype([('t', np.float64), " <<
        "('q1', np.float64), " <<
        "('q2', np.float64), " <<
        "('q3', np.float64), " <<
        "('x', np.float64), " <<
        "('y', np.float64), " <<
        "('w', np.float64), " <<
        "('w1', np.float64), " <<
        "('w2', np.float64), " <<
        "('w3', np.float64), " <<
        "('cbx', np.float64), " <<
        "('cby', np.float64), " <<
        "('cbz', np.float64), " <<
        "('ke', np.float64), " <<
        "('pe', np.float64), " <<
        "('te', np.float64), " <<
        "('H1', np.float64), " <<
        "('H2', np.float64), " <<
        "('H3', np.float64), " <<
        "('p1', np.float64), " <<
        "('p2', np.float64), " <<
        "('p3', np.float64)]) " << endl;
  fp.close();
} // writeRecord_dt()

SlottedDiscs::SlottedDiscs()
{
  // Default parameters
  ra = rb = .1;
  l = sqrt(2.0)*ra;
  g = 9.81;
  alpha = M_PI/2.0;
  
  double ma, mb;
  ma = mb = 2.0;
  m = ma + mb;
  double Ia = ma*ra*ra/4.0;
  double Ja = ma*ra*ra/2.0;

  double Ib = mb*rb*rb/4.0;
  double Jb = mb*rb*rb/2.0;

  k = l*mb/(ma+mb);
  Ixx = Ia + Ib*pow(cos(alpha),2) + Jb*pow(sin(alpha),2) + mb*pow(l,2)*(ma*mb/
  pow((ma+mb),2)+pow((1-mb/(ma+mb)),2));
  Iyy = Ja + Jb + pow(sin(alpha),2)*(Ib-Jb) + mb*pow(l,2)*(ma*mb/pow((ma+mb),
  2)+pow((1-mb/(ma+mb)),2));
  Izz = Ia + Ib + mb*pow(l,2)*pow((1-mb/(ma+mb)),2) + mb*pow(l,2)*(-1+mb/(ma+
  mb))*(1-mb/(ma+mb));
  Ixy = sin(alpha)*cos(alpha)*(Ib-Jb);

  // Set state
  q1 = 0.0;
  q2 = M_PI / 4.0;
  q3 = M_PI/2.0;
  q4 = q5 = 0.0;
  w = -1.4;

  // Set integration settings
  t = 0.0;
  tf = 10.0;
  h = 0.001;
  T = gsl_odeiv_step_rk8pd;
  s = gsl_odeiv_step_alloc(T, 6);
  c = gsl_odeiv_control_y_new(1e-6, 1e-9);
  e = gsl_odeiv_evolve_alloc(6);
  sys.function = eomwrapper;
  sys.jacobian = NULL;
  sys.dimension = 6;
  sys.params = this;

  for (int i = 0; i < Z_MAX; ++i)
    z[i] = 0.0;

  // Constants
  evalConstants();
  eoms();
  computeOutputs();

  // Write the file which holds the numpy record data type so that plotting is
  // easy
  writeRecord_dt();
 
} // constructor

SlottedDiscs::~SlottedDiscs()
{
  gsl_odeiv_evolve_free(e);
  gsl_odeiv_control_free(c);
  gsl_odeiv_step_free(s);
} // destructor

void SlottedDiscs::printState(void) const
{
  cout.setf(ios::right, ios::adjustfield);
  cout.setf(ios::scientific, ios::floatfield);
  cout.setf(ios::adjustfield, ios::right);
  cout.precision(9);
  cout.width(18);
  cout << q1;
  cout.width(18);
  cout << q2;
  cout.width(18);
  cout << q3;
  cout.width(18);
  cout << q4;
  cout.width(18);
  cout << q5;
  cout.width(18);
  cout << w3;
  cout << endl;
} // printState()

void SlottedDiscs::printEnergy(void) const
{
  cout.setf(ios::scientific, ios::floatfield);
  cout.setf(ios::adjustfield, ios::right);
  cout.precision(9);
  cout.width(18);
  cout << ke;
  cout.width(18);
  cout << pe;
  cout.width(18);
  cout << te;
  cout << endl;
} // printEnergy()

void SlottedDiscs::printParameters() const
{
  cout.setf(ios::scientific, ios::floatfield);
  cout.setf(ios::adjustfield, ios::right);
  cout.precision(9);
  cout << "ra = " << ra << endl << "rb = " << rb << endl;
  cout << "m = " << m << endl;
  cout << "Ixx = " << Ixx << endl << "Iyy = " << Iyy << endl;
  cout << "Izz = " << Izz << endl << "Ixy = " << Ixy << endl;
  cout << "alpha = " << alpha << endl << "l = " << l << endl;
  cout << "k = " << k << endl;
  cout << "g = " << g << endl;
} // printParameters()

void SlottedDiscs::evalConstants(void)
{
  z[116] = g*m;
  z[1] = cos(phi);
  z[2] = sin(phi);
  z[3] = sin(theta);
  z[4] = z[2]*z[3];
  z[5] = z[1]*z[3];
  z[6] = cos(theta);
  z[7] = z[2]*z[6];
  z[8] = z[1]*z[6];
  z[15] = cos(alpha);
  z[16] = sin(alpha);
} //evalConstants()

void SlottedDiscs::eoms(void)
{
  z[13] = cos(q3);
  z[11] = cos(q2);
  z[22] = z[11]*z[13];
  z[12] = sin(q2);
  z[14] = sin(q3);
  z[21] = z[11]*z[14];
  z[28] = z[15]*z[12] + z[16]*z[21];
  z[29] = 1 - pow(z[28],2);
  z[30] = pow(z[29],0.5);
  z[31] = 1/z[30];
  z[35] = rb*z[22]*z[31];
  z[18] = ra*z[13];
  z[37] = z[35] - l - z[18];
  z[32] = z[28]/z[30];
  z[34] = rb*(z[15]*z[32]-z[12]*z[31]);
  z[17] = ra*z[14];
  z[33] = rb*(z[16]*z[32]-z[21]*z[31]);
  z[36] = z[17] + z[33];
  z[38] = pow(z[34],2) + pow(z[36],2) + pow(z[37],2);
  z[39] = pow(z[38],0.5);
  z[41] = z[37]/z[39];
  z[40] = z[36]/z[39];
  z[43] = (z[13]*z[41]-z[14]*z[40])/z[11];
  q1p = w*z[43];
  z[44] = z[13]*z[40] + z[14]*z[41];
  q2p = w*z[44];
  z[42] = z[34]/z[39];
  z[45] = tan(q2);
  z[46] = -z[42] - z[45]*(z[13]*z[41]-z[14]*z[40]);
  q3p = w*z[46];
  z[9] = cos(q1);
  z[10] = sin(q1);
  z[20] = z[12]*z[13];
  z[51] = z[9]*z[14] + z[10]*z[20];
  z[19] = z[12]*z[14];
  z[47] = z[9]*z[13] - z[10]*z[19];
  z[53] = (z[17]*z[51]+z[18]*z[47])*q3p;
  q4p = -z[53];
  z[52] = z[10]*z[14] - z[9]*z[20];
  z[48] = z[9]*z[19] + z[10]*z[13];
  z[54] = (z[17]*z[52]+z[18]*z[48])*q3p;
  q5p = -z[54];
  z[55] = z[42]*(k+z[18]);
  z[56] = z[17]*z[41] + z[40]*(k+z[18]);
  z[57] = z[17]*z[42];
  z[26] = z[15]*z[11] - z[16]*z[19];
  z[62] = z[26]*z[28];
  z[64] = z[62]/pow(z[29],0.5);
  z[66] = (z[26]*z[30]+z[28]*z[64])/pow(z[30],2);
  z[68] = z[64]/pow(z[30],2);
  z[73] = rb*(z[15]*z[66]-z[11]*z[31]-z[12]*z[68]);
  z[70] = rb*(z[16]*z[66]+z[19]*z[31]-z[21]*z[68]);
  z[75] = rb*(z[20]*z[31]-z[22]*z[68]);
  z[78] = 2*z[34]*z[73] + 2*z[36]*z[70] - 2*z[37]*z[75];
  z[80] = z[78]/pow(z[38],0.5);
  z[90] = (z[37]*z[80]+2*z[39]*z[75])/pow(z[39],2);
  z[92] = w*z[90];
  z[61] = z[16]*z[22];
  z[63] = z[28]*z[61];
  z[65] = z[63]/pow(z[29],0.5);
  z[67] = (z[28]*z[65]+z[30]*z[61])/pow(z[30],2);
  z[69] = z[65]/pow(z[30],2);
  z[74] = rb*(z[15]*z[67]-z[12]*z[69]);
  z[71] = rb*(z[16]*z[67]-z[21]*z[69]-z[22]*z[31]);
  z[72] = z[18] + z[71];
  z[76] = rb*(z[21]*z[31]-z[22]*z[69]);
  z[77] = z[17] - z[76];
  z[79] = 2*z[34]*z[74] + 2*z[36]*z[72] + 2*z[37]*z[77];
  z[81] = z[79]/pow(z[38],0.5);
  z[91] = (z[37]*z[81]-2*z[39]*z[77])/pow(z[39],2);
  z[93] = w*z[91];
  z[96] = -0.5*z[92]*q2p - 0.5*z[93]*q3p;
  z[82] = (z[36]*z[80]-2*z[39]*z[70])/pow(z[39],2);
  z[84] = w*z[82];
  z[83] = (z[36]*z[81]-2*z[39]*z[72])/pow(z[39],2);
  z[85] = w*z[83];
  z[94] = -0.5*z[84]*q2p - 0.5*z[85]*q3p;
  z[86] = (z[34]*z[80]-2*z[39]*z[73])/pow(z[39],2);
  z[88] = w*z[86];
  z[87] = (z[34]*z[81]-2*z[39]*z[74])/pow(z[39],2);
  z[89] = w*z[87];
  z[95] = 0.5*z[88]*q2p + 0.5*z[89]*q3p;
  z[100] = -z[17]*z[42] - 0.5*z[87]*(k+z[18]);
  z[102] = w*z[100];
  z[101] = z[86]*(k+z[18]);
  z[103] = w*z[101];
  z[112] = z[102]*q3p - pow(w,2)*z[41]*z[56] - pow(w,2)*z[42]*z[57] - 0.5*
  z[103]*q2p;
  z[104] = z[18]*z[41] - z[17]*z[40] - 0.5*z[17]*z[91] - 0.5*z[83]*(k+z[18]);
  z[106] = w*z[104];
  z[105] = -0.5*z[17]*z[90] - 0.5*z[82]*(k+z[18]);
  z[107] = w*z[105];
  z[113] = pow(w,2)*z[41]*z[55] + z[106]*q3p + z[107]*q2p - pow(w,2)*z[40]*
  z[57];
  z[108] = z[18]*z[42] - 0.5*z[17]*z[87];
  z[110] = w*z[108];
  z[109] = z[17]*z[86];
  z[111] = w*z[109];
  z[114] = pow(w,2)*z[40]*z[56] + pow(w,2)*z[42]*z[55] + z[110]*q3p - 0.5*
  z[111]*q2p;
  z[117] = z[116]*(z[21]*z[55]-z[12]*z[56]-z[22]*z[57]) + Izz*z[41]*z[96] + 
  z[40]*(Ixx*z[94]+Ixy*z[95]) + m*(z[55]*z[112]+z[56]*z[113]+z[57]*z[114]) - 
  z[42]*(Ixy*z[94]+Iyy*z[95]);
  z[115] = -Iyy*pow(z[42],2) - Izz*pow(z[41],2) - z[40]*(Ixx*z[40]-2*Ixy*
  z[42]) - m*(pow(z[55],2)+pow(z[56],2)+pow(z[57],2));
  z[118] = z[117]/z[115];
  wp = z[118];
} // eoms()

void SlottedDiscs::computeOutputs(void)
{
  z[49] = z[10]*z[11];
  z[50] = z[9]*z[11];
  ke = 0.5*pow(w,2)*(Iyy*pow(z[42],2)+Izz*pow(z[41],2)+z[40]*(Ixx*z[40]-2*Ixy*
  z[42])+m*(pow(z[55],2)+pow(z[56],2)+pow(z[57],2)));
  pe = g*m*(z[17]*z[21]+z[22]*(k+z[18]));
  te = ke + pe;
  w1 = w*z[40];
  w2 = -w*z[42];
  w3 = w*z[41];
  z[119] = z[1]*z[47] + z[2]*z[48];
  z[120] = z[2]*z[50] - z[1]*z[49];
  z[121] = z[1]*z[51] + z[2]*z[52];
  z[122] = z[4]*z[47] + z[6]*z[21] - z[5]*z[48];
  z[123] = -z[4]*z[49] - z[5]*z[50] - z[6]*z[12];
  z[124] = z[4]*z[51] - z[5]*z[52] - z[6]*z[22];
  z[125] = z[3]*z[21] + z[8]*z[48] - z[7]*z[47];
  z[126] = z[7]*z[49] + z[8]*z[50] - z[3]*z[12];
  z[127] = z[8]*z[52] - z[3]*z[22] - z[7]*z[51];
  z[128] = z[15]*z[119] + z[16]*z[120];
  z[129] = z[15]*z[120] - z[16]*z[119];
  z[130] = z[15]*z[122] + z[16]*z[123];
  z[131] = z[15]*z[123] - z[16]*z[122];
  z[132] = z[15]*z[125] + z[16]*z[126];
  z[133] = z[15]*z[126] - z[16]*z[125];
  z[134] = z[1]*z[9] + z[2]*z[10];
  z[135] = z[2]*z[9] - z[1]*z[10];
  z[136] = z[4]*z[9] - z[5]*z[10];
  z[137] = -z[4]*z[10] - z[5]*z[9];
  z[138] = z[8]*z[10] - z[7]*z[9];
  z[139] = z[7]*z[10] + z[8]*z[9];
  z[140] = pow(z[33],2) + pow(z[34],2) + pow(z[35],2);
  z[141] = pow(z[140],0.5);
  z[142] = z[33]/z[141];
  z[143] = z[34]/z[141];
  z[144] = z[35]/z[141];
  z[145] = z[15]*z[11] - z[16]*z[12]*z[14];
  z[146] = z[28]*z[145]/(pow(z[29],0.5)*pow(z[30],2));
  z[147] = rb*(z[22]*z[146]-z[12]*z[13]*z[31]);
  z[148] = z[145]*(z[30]+pow(z[28],2)/pow(z[29],0.5))/pow(z[30],2);
  z[149] = rb*(z[15]*z[148]-z[11]*z[31]-z[12]*z[146]);
  z[150] = rb*(z[21]*z[146]-z[16]*z[148]-z[12]*z[14]*z[31]);
  z[151] = 2*z[34]*z[149] + 2*z[37]*z[147] - 2*z[36]*z[150];
  z[152] = (2*z[39]*z[147]-z[37]*z[151]/pow(z[38],0.5))/pow(z[39],2);
  z[153] = (2*z[39]*z[150]+z[36]*z[151]/pow(z[38],0.5))/pow(z[39],2);
  z[154] = (z[11]*(z[13]*z[152]+z[14]*z[153])+2*z[12]*(z[13]*z[41]-z[14]*
  z[40]))/pow(z[11],2);
  z[155] = z[16]*z[11]*z[13]*z[28];
  z[156] = rb*(z[11]*z[14]*z[31]-z[22]*z[155]/(pow(z[29],0.5)*pow(z[30],2)));
  z[157] = (z[16]*z[11]*z[13]*z[30]+z[28]*z[155]/pow(z[29],0.5))/pow(z[30],2);
  z[158] = rb*(z[15]*z[157]-z[12]*z[155]/(pow(z[29],0.5)*pow(z[30],2)));
  z[159] = rb*(z[16]*z[157]-z[11]*z[13]*z[31]-z[21]*z[155]/(pow(z[29],0.5)*
  pow(z[30],2)));
  z[160] = 2*z[34]*z[158] + 2*z[36]*(z[159]+ra*z[13]) - 2*z[37]*(z[156]-ra*
  z[14]);
  z[161] = (z[37]*z[160]/pow(z[38],0.5)+2*z[39]*(z[156]-ra*z[14]))/pow(z[39],
  2);
  z[162] = (z[36]*z[160]/pow(z[38],0.5)-2*z[39]*(z[159]+ra*z[13]))/pow(z[39],
  2);
  z[163] = (z[13]*z[161]+2*z[13]*z[40]+2*z[14]*z[41]-z[14]*z[162])/z[11];
  z[164] = 0.5*z[14]*z[152] - 0.5*z[13]*z[153];
  z[165] = z[13]*z[41] - z[14]*z[40] - 0.5*z[13]*z[162] - 0.5*z[14]*z[161];
  z[166] = (2*z[39]*z[149]-z[34]*z[151]/pow(z[38],0.5))/pow(z[39],2);
  z[167] = -0.5*z[166] - 0.5*z[45]*(z[13]*z[152]+z[14]*z[153]) - (z[13]*z[41]-
  z[14]*z[40])/pow(z[11],2);
  z[168] = (2*z[39]*z[158]-z[34]*z[160]/pow(z[38],0.5))/pow(z[39],2);
  z[169] = 0.5*z[45]*(z[13]*z[161]+2*z[13]*z[40]+2*z[14]*z[41]-z[14]*z[162]) - 
  0.5*z[168];
  z[170] = z[9]*z[20] - z[10]*z[14];
  z[171] = -z[9]*z[19] - z[10]*z[13];
  z[172] = (z[17]*z[170]+z[18]*z[171])*q3p;
  z[173] = w*z[167]*(z[17]*z[51]+z[18]*z[47]) + z[10]*z[11]*(z[13]*z[17]-
  z[14]*z[18])*q3p;
  z[174] = z[9]*z[13] - z[10]*z[12]*z[14];
  z[175] = -z[9]*z[14] - z[10]*z[12]*z[13];
  z[176] = w*z[169]*(z[17]*z[51]+z[18]*z[47]) + (z[17]*z[174]+z[18]*z[175]+ra*
  z[13]*z[51]-ra*z[14]*z[47])*q3p;
  z[177] = z[46]*(z[17]*z[51]+z[18]*z[47]);
  z[178] = w*z[167]*(z[17]*z[52]+z[18]*z[48]) - z[9]*z[11]*(z[13]*z[17]-z[14]*
  z[18])*q3p;
  z[179] = z[10]*z[13] + z[9]*z[12]*z[14];
  z[180] = z[9]*z[12]*z[13] - z[10]*z[14];
  z[181] = w*z[169]*(z[17]*z[52]+z[18]*z[48]) + (z[17]*z[179]+z[18]*z[180]+ra*
  z[13]*z[52]-ra*z[14]*z[48])*q3p;
  z[182] = z[46]*(z[17]*z[52]+z[18]*z[48]);
  z[183] = 0.5*z[17]*z[152] - 0.5*z[153]*(k+z[18]);
  z[184] = -z[15]*z[12] - z[16]*z[11]*z[14];
  z[185] = z[26]*z[145] + z[28]*z[184];
  z[186] = (z[29]*z[185]+z[28]*z[62]*z[145])/pow(z[29],1.5);
  z[187] = (z[30]*(z[28]*z[186]+z[30]*z[184]+z[64]*z[145])+z[28]*z[145]*(
  z[26]*z[30]+2*z[28]*z[64])/pow(z[29],0.5))/pow(z[30],3);
  z[188] = (z[30]*z[186]+2*z[28]*z[64]*z[145]/pow(z[29],0.5))/pow(z[30],3);
  z[189] = rb*(z[15]*z[187]+z[12]*z[31]-z[11]*z[68]-z[11]*z[146]-z[12]*z[188]);
  z[190] = rb*(z[21]*z[188]-z[16]*z[187]-z[19]*z[146]-z[11]*z[14]*z[31]-z[12]*
  z[14]*z[68]);
  z[191] = rb*(z[22]*z[188]-z[20]*z[146]-z[11]*z[13]*z[31]-z[12]*z[13]*z[68]);
  z[192] = 2*z[34]*z[189] + 2*z[37]*z[191] + 2*z[73]*z[149] - 2*z[36]*z[190] - 
  2*z[70]*z[150] - 2*z[75]*z[147];
  z[193] = (2*z[38]*z[192]-z[78]*z[151])/pow(z[38],1.5);
  z[194] = (2*z[151]*(z[37]*z[80]+z[39]*z[75])/pow(z[38],0.5)+z[39]*(4*z[39]*
  z[191]-2*z[80]*z[147]-z[37]*z[193]))/pow(z[39],3);
  z[195] = z[61]*z[145] - z[16]*z[12]*z[13]*z[28];
  z[196] = (z[29]*z[195]+z[28]*z[63]*z[145])/pow(z[29],1.5);
  z[197] = (z[28]*z[145]*(z[30]*z[61]+2*z[28]*z[65])/pow(z[29],0.5)+z[30]*(
  z[28]*z[196]+z[65]*z[145]-z[16]*z[12]*z[13]*z[30]))/pow(z[30],3);
  z[198] = (z[30]*z[196]+2*z[28]*z[65]*z[145]/pow(z[29],0.5))/pow(z[30],3);
  z[199] = rb*(z[15]*z[197]-z[11]*z[69]-z[12]*z[198]);
  z[200] = rb*(z[21]*z[198]+z[22]*z[146]-z[16]*z[197]-z[12]*z[13]*z[31]-z[12]*
  z[14]*z[69]);
  z[201] = rb*(z[21]*z[146]+z[12]*z[13]*z[69]-z[22]*z[198]-z[12]*z[14]*z[31]);
  z[202] = 2*z[34]*z[199] + 2*z[74]*z[149] + 2*z[77]*z[147] - 2*z[36]*z[200] - 
  2*z[37]*z[201] - 2*z[72]*z[150];
  z[203] = (2*z[38]*z[202]-z[79]*z[151])/pow(z[38],1.5);
  z[204] = (2*z[37]*z[81]*z[151]/pow(z[38],0.5)-z[39]*(z[37]*z[203]+2*z[81]*
  z[147]+4*z[39]*z[201]+2*z[77]*z[151]/pow(z[38],0.5)))/pow(z[39],3);
  z[205] = w*(2*z[92]*z[164]+2*z[93]*z[167]-z[194]*q2p-z[204]*q3p);
  z[206] = (2*z[36]*z[80]*z[151]/pow(z[38],0.5)+z[39]*(2*z[80]*z[150]-4*z[39]*
  z[190]-z[36]*z[193]-2*z[70]*z[151]/pow(z[38],0.5)))/pow(z[39],3);
  z[207] = (2*z[36]*z[81]*z[151]/pow(z[38],0.5)+z[39]*(2*z[81]*z[150]-4*z[39]*
  z[200]-z[36]*z[203]-2*z[72]*z[151]/pow(z[38],0.5)))/pow(z[39],3);
  z[208] = w*(2*z[84]*z[164]+2*z[85]*z[167]-z[206]*q2p-z[207]*q3p);
  z[209] = (2*z[34]*z[80]*z[151]/pow(z[38],0.5)+z[39]*(4*z[39]*z[189]-2*z[80]*
  z[149]-z[34]*z[193]-2*z[73]*z[151]/pow(z[38],0.5)))/pow(z[39],3);
  z[210] = (2*z[34]*z[81]*z[151]/pow(z[38],0.5)+z[39]*(4*z[39]*z[199]-2*z[81]*
  z[149]-z[34]*z[203]-2*z[74]*z[151]/pow(z[38],0.5)))/pow(z[39],3);
  z[211] = w*(2*z[88]*z[164]+2*z[89]*z[167]-z[209]*q2p-z[210]*q3p);
  z[212] = 0.25*z[210]*(k+z[18]) - 0.5*z[17]*z[166];
  z[213] = w*z[209]*(k+z[18]);
  z[214] = w*z[102]*z[167] + 0.25*z[213]*q2p + w*z[212]*q3p - 0.5*w*z[103]*
  z[164] - pow(w,2)*z[41]*z[183] - 0.5*pow(w,2)*z[56]*z[152] - 0.5*pow(w,2)*
  z[57]*z[166] - 0.5*pow(w,2)*z[17]*z[42]*z[166];
  z[215] = 0.25*z[17]*z[204] + 0.5*z[17]*z[153] + 0.5*z[18]*z[152] + 0.25*
  z[207]*(k+z[18]);
  z[216] = 0.25*z[17]*z[194] + 0.25*z[206]*(k+z[18]);
  z[217] = w*(w*z[17]*z[40]*z[166]-2*z[106]*z[167]-2*z[107]*z[164]-w*z[55]*
  z[152]-w*z[57]*z[153]-w*z[41]*z[166]*(k+z[18])-2*z[215]*q3p-2*z[216]*q2p);
  z[218] = 0.25*z[17]*z[210] + 0.5*z[18]*z[166];
  z[219] = w*(2*z[111]*z[164]+2*w*z[56]*z[153]-4*z[110]*z[167]-4*w*z[40]*
  z[183]-2*w*z[55]*z[166]-2*w*z[42]*z[166]*(k+z[18])-4*z[218]*q3p-z[17]*
  z[209]*q2p);
  z[220] = 0.5*Izz*z[152]*z[96] + 0.25*z[42]*(Ixy*z[208]-Iyy*z[211]) - 0.5*
  z[116]*(2*z[11]*z[56]+2*z[12]*z[183]+z[17]*z[22]*z[166]+2*z[12]*z[14]*z[55]-
  2*z[12]*z[13]*z[57]-z[21]*z[166]*(k+z[18])) - 0.25*Izz*z[41]*z[205] - 0.5*
  z[153]*(Ixx*z[94]+Ixy*z[95]) - 0.5*z[166]*(Ixy*z[94]+Iyy*z[95]) - 0.25*
  z[40]*(Ixx*z[208]-Ixy*z[211]) - 0.25*m*(z[57]*z[219]+2*z[56]*z[217]-4*z[55]*
  z[214]-4*z[183]*z[113]-2*z[17]*z[166]*z[114]-2*z[166]*(k+z[18])*z[112]);
  z[221] = z[40]*(Ixx*z[153]+Ixy*z[166]) - Ixy*z[42]*z[153] - Iyy*z[42]*
  z[166] - Izz*z[41]*z[152] - m*(2*z[56]*z[183]+z[17]*z[57]*z[166]+z[55]*
  z[166]*(k+z[18]));
  z[222] = (z[115]*z[220]-z[221]*z[117])/pow(z[115],2);
  z[223] = 0.5*z[168]*(k+z[18]) - ra*z[14]*z[42];
  z[224] = ra*z[13]*z[41] - 0.5*z[17]*z[161] - ra*z[14]*z[40] - 0.5*z[162]*(k+
  z[18]);
  z[225] = 0.5*z[17]*z[168] + ra*z[13]*z[42];
  z[226] = z[16]*z[13]*(z[11]*z[26]-z[12]*z[28]);
  z[227] = (z[29]*z[226]+z[62]*z[155])/pow(z[29],1.5);
  z[228] = (z[155]*(z[26]*z[30]+2*z[28]*z[64])/pow(z[29],0.5)+z[30]*(z[28]*
  z[227]+z[16]*z[11]*z[13]*z[64]-z[16]*z[12]*z[13]*z[30]))/pow(z[30],3);
  z[229] = (z[30]*z[227]+2*z[64]*z[155]/pow(z[29],0.5))/pow(z[30],3);
  z[230] = rb*(z[15]*z[228]-z[12]*z[229]-z[11]*z[155]/(pow(z[29],0.5)*pow(
  z[30],2)));
  z[231] = rb*(z[21]*z[229]+z[11]*z[13]*z[68]-z[16]*z[228]-z[12]*z[13]*z[31]-
  z[19]*z[155]/(pow(z[29],0.5)*pow(z[30],2)));
  z[232] = rb*(z[22]*z[229]+z[12]*z[14]*z[31]-z[11]*z[14]*z[68]-z[20]*z[155]/(
  pow(z[29],0.5)*pow(z[30],2)));
  z[233] = 2*z[34]*z[230] + 2*z[37]*z[232] + 2*z[73]*z[158] + 2*z[70]*(z[159]+
  ra*z[13]) + 2*z[75]*(z[156]-ra*z[14]) - 2*z[36]*z[231];
  z[234] = (2*z[38]*z[233]-z[78]*z[160])/pow(z[38],1.5);
  z[235] = (2*z[160]*(z[37]*z[80]+z[39]*z[75])/pow(z[38],0.5)-z[39]*(z[37]*
  z[234]-4*z[39]*z[232]-2*z[80]*(z[156]-ra*z[14])))/pow(z[39],3);
  z[236] = z[16]*z[11]*(z[13]*z[61]-z[14]*z[28]);
  z[237] = (z[29]*z[236]+z[63]*z[155])/pow(z[29],1.5);
  z[238] = (z[155]*(z[30]*z[61]+2*z[28]*z[65])/pow(z[29],0.5)+z[30]*(z[28]*
  z[237]+z[16]*z[11]*z[13]*z[65]-z[16]*z[11]*z[14]*z[30]))/pow(z[30],3);
  z[239] = (z[30]*z[237]+2*z[65]*z[155]/pow(z[29],0.5))/pow(z[30],3);
  z[240] = rb*(z[15]*z[238]-z[12]*z[239]);
  z[241] = rb*(z[16]*z[238]+z[11]*z[14]*z[31]-z[21]*z[239]-z[11]*z[13]*z[69]-
  z[22]*z[155]/(pow(z[29],0.5)*pow(z[30],2)));
  z[242] = rb*(z[22]*z[239]-z[11]*z[13]*z[31]-z[11]*z[14]*z[69]-z[21]*z[155]/(
  pow(z[29],0.5)*pow(z[30],2)));
  z[243] = 2*z[34]*z[240] + 2*z[74]*z[158] + 2*z[37]*(z[242]+ra*z[13]) + 2*
  z[72]*(z[159]+ra*z[13]) + 2*z[36]*(z[241]-ra*z[14]) - 2*z[77]*(z[156]-ra*
  z[14]);
  z[244] = (2*z[38]*z[243]-z[79]*z[160])/pow(z[38],1.5);
  z[245] = (2*z[160]*(z[37]*z[81]-z[39]*z[77])/pow(z[38],0.5)-z[39]*(z[37]*
  z[244]-4*z[39]*(z[242]+ra*z[13])-2*z[81]*(z[156]-ra*z[14])))/pow(z[39],3);
  z[246] = w*(2*z[92]*z[165]+2*z[93]*z[169]-z[235]*q2p-z[245]*q3p);
  z[247] = (2*z[160]*(z[36]*z[80]-z[39]*z[70])/pow(z[38],0.5)-z[39]*(z[36]*
  z[234]+4*z[39]*z[231]+2*z[80]*(z[159]+ra*z[13])))/pow(z[39],3);
  z[248] = (2*z[160]*(z[36]*z[81]-z[39]*z[72])/pow(z[38],0.5)-z[39]*(z[36]*
  z[244]+2*z[81]*(z[159]+ra*z[13])-4*z[39]*(z[241]-ra*z[14])))/pow(z[39],3);
  z[249] = w*(2*z[84]*z[165]+2*z[85]*z[169]-z[247]*q2p-z[248]*q3p);
  z[250] = (2*z[34]*z[80]*z[160]/pow(z[38],0.5)+z[39]*(4*z[39]*z[230]-2*z[80]*
  z[158]-z[34]*z[234]-2*z[73]*z[160]/pow(z[38],0.5)))/pow(z[39],3);
  z[251] = (2*z[34]*z[81]*z[160]/pow(z[38],0.5)+z[39]*(4*z[39]*z[240]-2*z[81]*
  z[158]-z[34]*z[244]-2*z[74]*z[160]/pow(z[38],0.5)))/pow(z[39],3);
  z[252] = w*(2*z[88]*z[165]+2*z[89]*z[169]-z[250]*q2p-z[251]*q3p);
  z[253] = 0.5*ra*z[14]*z[87] + 0.25*z[251]*(k+z[18]) - 0.5*z[17]*z[168] - ra*
  z[13]*z[42];
  z[254] = -ra*z[14]*z[86] - 0.5*z[250]*(k+z[18]);
  z[255] = w*(2*z[102]*z[169]+w*z[56]*z[161]+2*z[253]*q3p-z[103]*z[165]-2*w*
  z[41]*z[224]-2*w*z[42]*z[225]-w*z[57]*z[168]-z[254]*q2p);
  z[256] = 0.25*z[17]*z[245] + 0.5*z[17]*z[162] + 0.5*ra*z[14]*z[83] + 0.25*
  z[248]*(k+z[18]) - 0.5*z[18]*z[161] - ra*z[13]*z[40] - ra*z[14]*z[41] - 0.5*
  ra*z[13]*z[91];
  z[257] = 0.25*z[17]*z[235] + 0.5*ra*z[14]*z[82] + 0.25*z[247]*(k+z[18]) - 
  0.5*ra*z[13]*z[90];
  z[258] = w*(w*z[55]*z[161]+2*w*z[40]*z[225]-2*z[106]*z[169]-2*z[107]*z[165]-
  2*w*z[41]*z[223]-w*z[57]*z[162]-2*z[256]*q3p-2*z[257]*q2p);
  z[259] = 0.25*z[17]*z[251] + 0.5*z[18]*z[168] - ra*z[14]*z[42] - 0.5*ra*
  z[13]*z[87];
  z[260] = ra*z[13]*z[86] - 0.5*z[17]*z[250];
  z[261] = w*(2*z[110]*z[169]+w*z[55]*z[168]+2*w*z[40]*z[224]+2*w*z[42]*
  z[223]+2*z[259]*q3p-z[111]*z[165]-w*z[56]*z[162]-z[260]*q2p);
  z[262] = 0.25*z[42]*(Ixy*z[249]-Iyy*z[252]) - z[116]*(z[12]*z[224]+z[22]*
  z[225]-z[21]*z[223]-z[11]*z[13]*z[55]-z[11]*z[14]*z[57]) - 0.5*Izz*z[161]*
  z[96] - 0.25*Izz*z[41]*z[246] - 0.5*z[162]*(Ixx*z[94]+Ixy*z[95]) - 0.5*
  z[168]*(Ixy*z[94]+Iyy*z[95]) - 0.25*z[40]*(Ixx*z[249]-Ixy*z[252]) - 0.5*m*(
  z[56]*z[258]-2*z[223]*z[112]-2*z[224]*z[113]-2*z[225]*z[114]-z[55]*z[255]-
  z[57]*z[261]);
  z[263] = Izz*z[41]*z[161] + z[40]*(Ixx*z[162]+Ixy*z[168]) - Ixy*z[42]*
  z[162] - Iyy*z[42]*z[168] - 2*m*(z[55]*z[223]+z[56]*z[224]+z[57]*z[225]);
  z[264] = (z[115]*z[262]-z[263]*z[117])/pow(z[115],2);
  z[265] = -0.5*z[44]*z[92] - 0.5*z[46]*z[93] - 0.5*z[90]*q2p - 0.5*z[91]*q3p;
  z[266] = -0.5*z[44]*z[84] - 0.5*z[46]*z[85] - 0.5*z[82]*q2p - 0.5*z[83]*q3p;
  z[267] = 0.5*z[44]*z[88] + 0.5*z[46]*z[89] + 0.5*z[86]*q2p + 0.5*z[87]*q3p;
  z[268] = z[46]*z[102] + z[100]*q3p - 0.5*z[44]*z[103] - 2*w*z[41]*z[56] - 2*
  w*z[42]*z[57] - 0.5*z[101]*q2p;
  z[269] = z[44]*z[107] + z[46]*z[106] + 2*w*z[41]*z[55] + z[104]*q3p + 
  z[105]*q2p - 2*w*z[40]*z[57];
  z[270] = z[46]*z[110] + 2*w*z[40]*z[56] + 2*w*z[42]*z[55] + z[108]*q3p - 
  0.5*z[44]*z[111] - 0.5*z[109]*q2p;
  z[271] = Izz*z[41]*z[265] + z[40]*(Ixx*z[266]+Ixy*z[267]) + m*(z[55]*z[268]+
  z[56]*z[269]+z[57]*z[270]) - z[42]*(Ixy*z[266]+Iyy*z[267]);

  no_cb[0] = q4 + z[34]*z[49] + z[47]*(z[17]+z[33]) - z[51]*(l+z[18]-z[35]);
  no_cb[1] = q5 + z[48]*(z[17]+z[33]) - z[34]*z[50] - z[52]*(l+z[18]-z[35]);
  no_cb[2] = -z[12]*z[34] - z[21]*(z[17]+z[33]) - z[22]*(l+z[18]-z[35]);
  H[0] = w*(Ixx*z[40]-Ixy*z[42]);
  H[1] = w*(Ixy*z[40]-Iyy*z[42]);
  H[2] = Izz*w*z[41];
  p[0] = m*w*z[55];
  p[1] = m*w*z[56];
  p[2] = m*w*z[57];
  df[0] = 0;
  df[1] = 0.5*w*z[154];
  df[2] = -0.5*w*z[163];
  df[3] = 0;
  df[4] = 0;
  df[5] = z[43];
  df[6] = 0;
  df[7] = w*z[164];
  df[8] = w*z[165];
  df[9] = 0;
  df[10] = 0;
  df[11] = z[44];
  df[12] = 0;
  df[13] = w*z[167];
  df[14] = w*z[169];
  df[15] = 0;
  df[16] = 0;
  df[17] = z[46];
  df[18] = -z[172];
  df[19] = -z[173];
  df[20] = -z[176];
  df[21] = 0;
  df[22] = 0;
  df[23] = -z[177];
  df[24] = -z[53];
  df[25] = -z[178];
  df[26] = -z[181];
  df[27] = 0;
  df[28] = 0;
  df[29] = -z[182];
  df[30] = 0;
  df[31] = z[222];
  df[32] = z[264];
  df[33] = 0;
  df[34] = 0;
  df[35] = z[271]/z[115];
  T_da[0] = z[119];
  T_da[1] = z[122];
  T_da[2] = z[125];
  T_da[3] = 0;
  T_da[4] = z[120];
  T_da[5] = z[123];
  T_da[6] = z[126];
  T_da[7] = 0;
  T_da[8] = z[121];
  T_da[9] = z[124];
  T_da[10] = z[127];
  T_da[11] = 0;
  T_da[12] = z[17]*z[119] - z[1]*(ctx-q4) - z[2]*(cty-q5) - z[18]*z[121];
  T_da[13] = ctz*z[6] + z[5]*(cty-q5) + z[17]*z[122] - z[4]*(ctx-q4) - z[18]*
  z[124];
  T_da[14] = ctz*z[3] + z[7]*(ctx-q4) + z[17]*z[125] - d - z[8]*(cty-q5) - 
  z[18]*z[127];
  T_da[15] = 1;
  T_db[0] = z[128];
  T_db[1] = z[130];
  T_db[2] = z[132];
  T_db[3] = 0;
  T_db[4] = z[129];
  T_db[5] = z[131];
  T_db[6] = z[133];
  T_db[7] = 0;
  T_db[8] = z[121];
  T_db[9] = z[124];
  T_db[10] = z[127];
  T_db[11] = 0;
  T_db[12] = z[17]*z[119] - z[1]*(ctx-q4) - z[2]*(cty-q5) - z[121]*(l+z[18]);
  T_db[13] = ctz*z[6] + z[5]*(cty-q5) + z[17]*z[122] - z[4]*(ctx-q4) - z[124]*(
  l+z[18]);
  T_db[14] = ctz*z[3] + z[7]*(ctx-q4) + z[17]*z[125] - d - z[8]*(cty-q5) - 
  z[127]*(l+z[18]);
  T_db[15] = 1;
  T_so[0] = z[119];
  T_so[1] = z[122];
  T_so[2] = z[125];
  T_so[3] = 0;
  T_so[4] = z[120];
  T_so[5] = z[123];
  T_so[6] = z[126];
  T_so[7] = 0;
  T_so[8] = z[121];
  T_so[9] = z[124];
  T_so[10] = z[127];
  T_so[11] = 0;
  T_so[12] = z[17]*z[119] - z[1]*(ctx-q4) - z[2]*(cty-q5) - z[121]*(k+z[18]);
  T_so[13] = ctz*z[6] + z[5]*(cty-q5) + z[17]*z[122] - z[4]*(ctx-q4) - z[124]*(
  k+z[18]);
  T_so[14] = ctz*z[3] + z[7]*(ctx-q4) + z[17]*z[125] - d - z[8]*(cty-q5) - 
  z[127]*(k+z[18]);
  T_so[15] = 1;
  T_ca[0] = z[134];
  T_ca[1] = z[136];
  T_ca[2] = z[138];
  T_ca[3] = 0;
  T_ca[4] = z[135];
  T_ca[5] = z[137];
  T_ca[6] = z[139];
  T_ca[7] = 0;
  T_ca[8] = 0;
  T_ca[9] = -z[6];
  T_ca[10] = -z[3];
  T_ca[11] = 0;
  T_ca[12] = -z[1]*(ctx-q4) - z[2]*(cty-q5);
  T_ca[13] = ctz*z[6] + z[5]*(cty-q5) - z[4]*(ctx-q4);
  T_ca[14] = ctz*z[3] + z[7]*(ctx-q4) - d - z[8]*(cty-q5);
  T_ca[15] = 1;
  T_cb[0] = z[11]*z[134]*z[143] + z[12]*z[119]*z[144] + z[120]*(z[21]*z[144]+
  z[22]*z[142]) - z[12]*z[121]*z[142];
  T_cb[1] = z[11]*z[136]*z[143] + z[12]*z[122]*z[144] + z[123]*(z[21]*z[144]+
  z[22]*z[142]) - z[12]*z[124]*z[142];
  T_cb[2] = z[11]*z[138]*z[143] + z[12]*z[125]*z[144] + z[126]*(z[21]*z[144]+
  z[22]*z[142]) - z[12]*z[127]*z[142];
  T_cb[3] = 0;
  T_cb[4] = z[11]*z[135]*z[143] - z[119]*z[142]*pow(z[12],2) - z[121]*z[144]*
  pow(z[12],2) - z[11]*z[134]*(z[21]*z[144]+z[22]*z[142]) - z[12]*z[120]*(
  z[21]*z[142]-z[22]*z[144]);
  T_cb[5] = z[11]*z[137]*z[143] - z[122]*z[142]*pow(z[12],2) - z[124]*z[144]*
  pow(z[12],2) - z[11]*z[136]*(z[21]*z[144]+z[22]*z[142]) - z[12]*z[123]*(
  z[21]*z[142]-z[22]*z[144]);
  T_cb[6] = z[11]*z[139]*z[143] - z[125]*z[142]*pow(z[12],2) - z[127]*z[144]*
  pow(z[12],2) - z[11]*z[138]*(z[21]*z[144]+z[22]*z[142]) - z[12]*z[126]*(
  z[21]*z[142]-z[22]*z[144]);
  T_cb[7] = 0;
  T_cb[8] = 0;
  T_cb[9] = -z[6];
  T_cb[10] = -z[3];
  T_cb[11] = 0;
  T_cb[12] = z[119]*(z[17]+z[33]) - z[1]*(ctx-q4) - z[2]*(cty-q5) - z[34]*
  z[120] - z[121]*(l+z[18]-z[35]);
  T_cb[13] = ctz*z[6] + z[5]*(cty-q5) + z[122]*(z[17]+z[33]) - z[4]*(ctx-q4) - 
  z[34]*z[123] - z[124]*(l+z[18]-z[35]);
  T_cb[14] = ctz*z[3] + z[7]*(ctx-q4) + z[125]*(z[17]+z[33]) - d - z[8]*(cty-
  q5) - z[34]*z[126] - z[127]*(l+z[18]-z[35]);
  T_cb[15] = 1;
} // computeOutputs()

void SlottedDiscs::setState(const double state[6])
{
  q1 = state[0];
  q2 = state[1];
  q3 = state[2];
  q4 = state[3];
  q5 = state[4];
  w = state[5];
} // setState()

void SlottedDiscs::setParameters(DiscParams * p)
{
  m = p->m;
  ra = p->ra;
  rb = p->rb;
  k = p->k;
  l = p->l;
  g = p->g;
  alpha = p->alpha;
  Ixx = p->Ixx;
  Iyy = p->Iyy;
  Izz = p->Izz;
  Ixy = p->Ixy;

  evalConstants();
} // setParameters()
